---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.8/plyr.css
js: 
-   https://cdn.plyr.io/3.6.8/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
---

# Countermodels

::: {.auto-tally}
:::

Construct countermodels to show that the following sentences are not logical
truths in predicate logic:

``` {.CounterModeler .Simple counterexample-to=tautology points="10"}
E15.1 P->Q
E15.2 ~(P->Q)
E15.3 F(a)/\~G(a)
E15.4 F(a)\/G(b)->F(a)/\G(b)
E15.5 Ex(F(x)/\G(x))
E15.6 Ex(F(x)/\~G(x))
E15.7 Ax(F(x)->G(x))
E15.8 Ax(F(x)->~G(x))
E15.9 AxF(x)\/Ax~F(x)
E15.10 ExF(x)->AxF(x)
E15.11 Ex~(F(x)\/G(x))
E15.12 ~Ex(F(x)\/G(x))
E15.13 ~(ExF(x)/\ExG(x))
E15.14 Ex(F(x)->G(x))
E15.15 Ex(~F(x)->G(x))
```

Construct countermodels to show that the following arguments are not valid
in predicate logic:

``` {.CounterModeler .Validity points="10"}
E15.16 P->Q, ~P :|-: ~Q
E15.17 F(a)\/G(b), G(b) :|-: ~F(a)
E15.18 Ex(F(x)\/G(x)), Ex(G(x)\/H(x)) :|-: ExG(x)
E15.19 Ax(F(x)->G(x)), ExF(x) :|-: AxG(x)
E15.20 Ax(F(x)<->G(x)), Ex~F(x) :|-: ~ExG(x)
E15.21 Ex(F(x)->G(x)), ExF(x) :|-: ExG(x)
E15.22 Ax(F(x)\/G(x)), Ex~G(x) :|-: AxF(x)
```

<!-- vim: set ft=carnap :-->
