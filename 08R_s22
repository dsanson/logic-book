---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.8/plyr.css
js: 
-   https://cdn.plyr.io/3.6.8/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
-   https://hypothes.is/embed.js
---

::: {.auto-tally}
:::

::: cover

# Truth Tables for Arguments

!["And the truth shall set you free!"](https://dsanson.github.io/logic/img/truth-set-you-free.gif){target="_blank"
rel="noopener noreferrer" alt="Animated GIF of Jim Carey exclaiming 'And the
truth shall set you free!' while tossing papers into the air."}

:::

## Introduction

In the last chapter, we learned how to use truth tables
to explore the truth-functional properties of individual sentences. In this
chapter, we use truth tables to explore logical relations *between* sentences, 
including our favorite such relation, validity.

Here are the specific learning objectives:

a.  I can use truth tables to determine whether or not two or more
    sentences are truth-functionally equivalent, and whether or not two
    or more sentences are truth-functionally consistent
b.  I can use truth tables to determine whether or not an argument is
    truth-functionally valid.

## Truth-Functional Equivalence

Here is a short video lecture on truth-functional equivalence. Note that, in
the video, I refer to truth-functional equivalence as "logical equivalence in
Sentential Logic".

:::solution
:::youtube
<https://youtu.be/7NGMspHN1H8>
:::
:::

To say that two or more sentences are [truth-functionally equivalent]{.vocab} is to
say that they each express exactly the same truth function. In other words, on every possible assignment, their truth values agree. 
In other words, on each row of their truth table, they have the same truth value.

::: vaside
Two or more sentences are [truth-functionally equivalent]{.vocab} iff, on each
row of their truth table, they have the same truth value.
:::

We've already encountered this relationship a few times. In our discussion of DNI and DNE,
in [Unit 5](05R_s22), I presented this table: 

::: itt
       P        ¬P      ¬¬P       ¬¬¬P     ¬¬¬¬P      ¬¬¬¬¬P   ...
  ------------ ---- ------------ ------ ------------ -------- -----
   [T]{.wavy}   F    [T]{.wavy}    F     [T]{.wavy}     F      ...
   [F]{.wavy}   T    [F]{.wavy}    T     [F]{.wavy}     T      ...
:::

The table illustrates the way that adding a negation to a sentence always flips its truth value,
from true to false, or from false to true.
And when we focus on the [highlighted]{.wavy} columns,
 the table shows us that 'P', '¬¬P' and '¬¬¬¬P' are truth-functionally equivalent.
They all agree in truth value on the first row, where P is true.
And they all agree in truth value on the second row, where P is false.
And those are the only two possible assignments of truth values to P.

In our discussion of inclusive and exclusive disjunction in [the last unit](07R_s22),
 we discussed the fact that we didn't need to add the connective for exclusive disjunction, '$\veebar$', to our language,
 because we can express an exclusive disjunction with the connectives we have.

Specifically, we encountered this table:

::: {.itt rows="2" .liveshapes}
   []{.P}   []{.Q}   []{.P} ↔ []{.Q}   []{.P} $\veebar$ []{.Q}
  -------- -------- ----------------- -------------------------
     T        T        [T]{.wavy}               [F]{.wavy} 
     T        F        [F]{.wavy}               [T]{.wavy}
     F        T        [F]{.wavy}               [T]{.wavy}
     F        F        [T]{.wavy}               [F]{.wavy}
:::

Focusing on the two [highlighted]{.wavy} columns,
 we see that the two sentences always *disagree* in truth value.
It is a short step from this observation to the construction of another table,
showing that '¬(P ↔ Q)' is truth-functionally equivalent to 'P $\veebar$ Q':

::: {.itt .liveshapes rows="2"}
   []{.P}   []{.Q}   ¬([]{.P} ↔ []{.Q})   []{.P} $\veebar$ []{.Q}
  -------- -------- -------------------- -------------------------
     T        T              F                       F
     T        F              T                       T
     F        T              T                       T
     F        F              F                       F
:::

Truth-functional equivalence is an important relationship.
Two sentences that are truth-functionally equivalent basically "say the same
thing". For example, most of our binary connectives are *commutative*: 
 the order of the parts doesn't make a difference to the truth value of the whole.
For example, 'P ∧ Q' is truth-functionally equivalent to 'Q ∧ P':

```{.TruthTable .Simple options="nocounterexample immutable nocheck display" submission=none}
 P/\Q, Q/\P
|T TT  T TT 
|T FF  F FT
|F FT  T FF
|F FF  F FF
```

This is just like other truth tables you've seen, but instead of calculating
the truth value of *one* sentence, we calculate the truth values for *two*
sentences. The two sentences are separated by a comma.

Truth tables can be hard to read, because there are so many Ts and Fs. 
You need to remember to look at the column *under the main connective*:
 that's the column that represents the truth value of the whole sentence.
And you are looking to see whether or not the truth values of the two whole sentences, 'P∧Q' and 'Q∧P', are the same on every row.

Here is a simplified table, just showing the truth values of the two sentences on each row:

::: {.itt rows="2"}
   P ∧ Q   Q ∧ P
  ------- ---------
     T        T
     F        F
     F        F
     F        F
:::

Do you see that they agree on each row? 
On the first row, both are true. On each of the other three rows, both are false.
This shows that they are truth-functionally equivalent.
Make sure you are also able to see this when looking at the full truth table, with all the extra Ts and Fs.

You are familiar with the idea of commutativity from algebra, where you learned that addition and multiplication are commutative, but subtraction and division are not:

:::centered
| x + y = y + x
| x - y ≠ y - x
| x × y = y × x
| x ÷ y ≠ y ÷ x
:::

Our disjunction is also commutative: 'P ∨ Q' is truth-functionally equivalent
to 'Q ∨ P', as is shown by this table:


```{.TruthTable .Simple options="nocounterexample" points=10}
1 P\/Q, Q\/P
```

:::{.reaction .correct ex=1}
Again, this is just like other truth tables you've seen,
 but we have two sentences, separated by a comma, instead of just one.
Again, truth tables can be hard to read, with all the Ts and Fs.
Focus on the column under the *main connective* of each sentence:
 that's the column that represents the truth value of the whole sentence.
:::

```{.QualitativeProblem .MultipleChoice points=10}
2 The truth table above establishes that
| *P∧Q and Q∧P are truth-functionally equivalent
| P∧Q and Q∧P are not truth-functionally equivalent
```

:::{.reaction .correct ex=2}
Good! Do you see that the two sentences are both assigned
 T on the first row, 
 T on the second row, 
 and T on the third row? 
And that they are both assigned F on the foruth row?
So, on each row, they agree.
So they are truth-functionally equivalent.
So disjunction is also commutative.
:::

But conditionals are *not* commutative: 'P → Q' is *not* truth-functionally
equivalent to 'Q → P':

```{.TruthTable .Simple options="nocounterexample" points=10}
3 P->Q, Q->P
```

```{.QualitativeProblem .MultipleChoice points=10}
4 The truth table above establishes that
| P→Q and Q→P are truth-functionally equivalent
| *P→Q and Q→P are not truth-functionally equivalent
```

:::{.reaction .correct ex=4}
Here is a table showing just the truth values of the whole sentences on each row:

::: {.itt rows="2"}
   P → Q   Q → P
  ------- ---------
     T        T
     F        T
     T        F
     T        T
:::

As you can see, the two sentences disagree in truth value on rows two and
three. So these two sentences are not truth-functionally equivalent.
So the conditional is not commutative.
:::

We say that 'Q → P' is the [converse]{.vocab} of 'P → Q'.
We just showed, with our truth table, that a conditional is not, as a general rule, truth-functionally equivalent to its converse. 
For example, 'If I vote then I care' is not truth-functionally equivalent to 'If I care then I vote'.
These are not two different ways of saying the same thing.
Instead, they are two distinct claims, which can differ in truth value.

However, every conditional *is* truth-functionally equivalent to its
[contrapositive]{.vocab}.
The contrapositive of 'P → Q' is '¬Q → ¬P': 
 swap antedecent and consequent,
 while also negating each.

```{.TruthTable .Simple options="nocounterexample" points=10}
5 P->Q, ~Q->~P
```

:::{.reaction .correct ex=5}
Again, eliminating extra distracting Ts and Fs, here are the
truth values, on each row, for each of the two sentences:

::: {.itt rows="2"}
   P → Q   ¬Q → ¬P
  ------- ---------
     T        T
     F        F
     T        T
     T        T
:::

As you can see, on each row, they agree, proving that these two sentences are
truth-functionally equivalent.
:::

Even though a conditional is equivalent to its contrapositive, 
often, one of the two will more clearly communicate an important relationship than the
other. Compare: 

:::example
-  If you pass the class, you take the final
-  If you don't take the final, you don't pass the class.
:::

These are equivalent, but the second is much easier for us to grasp, and much
easier for us to reason about.

In the exercises, you will have more opportunities to use truth tables to
explore other cool truth-functional equivalences.
For example, '¬(P ∧ Q)' is truth-functionally equivalent to '¬P ∧ ¬Q',
and 'P → Q' is truth-functionally equivalent to '¬P ∨ Q'.
The process of completing a truth table can get tedious.
But the logical relationships truth tables allow us to explore can be pretty
neat!

## Truth-Functional Consistency

Even though 'P → Q' and 'Q → P' are not truth-functionally equivalent, as we
saw above, they
are [truth-functionally consistent]{.vocab}. That is, it is, it is *possible* for
them to be true together: there is at least one assignment that makes them both true.
We can see this on the first and fourth rows of their
truth table, where they are both assigned T together:


```{.TruthTable .Simple options="nocounterexample immutable nocheck display" submission=none}
 P->Q, Q->P
|T TT  T TT 
|T FF  F TT
|F TT  T FF
|F TF  F TF
```

:::vaside
Two or more sentences are [truth-functionally consistent]{.vocab} iff there is
at least one assignment that makes them all true.

Two or more sentences are [truth-functionally inconsistent]{.vocab} iff there
is no assignment that makes them all true.
:::

But not sentences are truth-functionally consistent. Some
sentences cannot be true together, because they are [truth-functionally
inconsistent]{.vocab}. For these sentences, there is no assignment that makes
them all true. For example, 'P', 'P → Q' and 'P → ¬Q' cannot all be true together:

```{.TruthTable .Simple options="nocounterexample immutable nocheck display" submission=none}
 P, P->Q, P->~Q
|T  TT T  TF FT
|T  TF F  TT TF
|F  FT T  FT FT
|F  FT F  FT TF
```

Again, if you have trouble seeing past all the extra Ts and Fs,
 here is the simplified table, just showing the truth values for each
 sentence:

::: {.itt rows="3"}
   P   P → Q   P → ¬Q
  --- ------- --------
   T     T       F
   T     F       T
   F     T       T
   F     T       T
:::

Note that there is no row where all three sentences are true together: these three sentences
are truth-functionally inconsistent.

```{.TruthTable .Simple options="nocounterexample" points=10}
6 P->Q, ~Q\/P
```

```{.QualitativeProblem .MultipleSelection points=10}
7 These two sentences are:
| truth-functionally equivalent
| *not truth-functionally equivalent
| *truth-functionally consistent
| truth-functionally inconsistent
```

::: {.youtube .manual style="width:252px;height:200px"}
<https://youtu.be/JIM9D9h4mdA>
:::

```{.TruthTable .Simple options="nocounterexample" points=10}
8 P->(Q->R), Q->(P->R)
```

```{.QualitativeProblem .MultipleSelection points=10}
9 These two sentences are:
| *truth-functionally equivalent
| not truth-functionally equivalent
| *truth-functionally consistent
| truth-functionally inconsistent
```

::: {.youtube .manual style="width:360px;height:204px"}
<https://youtu.be/_fH1KaUo_dw>
:::

## Validity

Here is a short video lecture about using truth tables to determine
truth-functional validity.

:::solution
:::youtube
<https://youtu.be/d_8-zP-LsgE>
:::
:::

Equivalence and consistency are relations between sentences. Validity is too:
it is a relation between the premises and conclusion of an argument. Recall our definition:

Validity
:   An argument is valid iff it is impossible for all of its premises to be
    true but its conclusion false.

An assignment—a row of a truth table—represents a truth-functional
possibility. So an argument is [truth-functionally valid]{.vocab} when there
is no assignment—no row of its truth table—that assigns true to every
premise, but false to the conclusion.

Truth-Functional Validity
:   An argument is [truth-functionally valid]{.vocab} iff there is no
    assignment on which all the premises are true, and the conclusion is
    false.

Is this argument truth-functionally valid? (Keep reading below the exercise
for an explanation of what you are supposed to do!)

```{.TruthTable .Validity options="nocounterexample turnstilemark" points=10}
10 ~(P/\Q), Q->~Q :|-: P
| F TT T    TF FT  -   T
| T TF F    FT TF  -   T
| T FF T    TF FT  -   F
| T FF F    FT TF  -   F
```

Your job is to fill in the column under the turnstile ('⊢').
Note that your options are not 'T' or 'F', but '✓' or '✗'.
On each row, you are checking to see whether or not the argument takes on,
 on that row, from true premises to a false conclusion.
If it does, that is bad, and you should enter an '✗' under the turnstile.
If it doesn't, that is good, and you should enter a '✓' under the turnstile.

On the first row, just looking at the truth values under the main connective
of each sentence, we have 'F F ⊢ T'. That's not a case of the argument taking
us from true premises to a false conclusion, so that is good!:

::: {.itt rows="4"}
   ¬(P∧Q)   Q → ¬Q    ⊢     P
  -------- -------- ------ ---
     F        F       ✓     T
:::

On the second row, we have 'T T ⊢ T': the argument takes us from true premises
to a true conclusion. That is also good!:

::: {.itt rows="4"}
   ¬(P∧Q)   Q → ¬Q   ⊢   P
  -------- -------- --- ---
     F        F      ✓   T
     T        T      ✓   T
:::

On the third row, we have 'F F ⊢ F': the argument takes us from false premises
to a false conclusion. That's also good! Again, the only *bad* thing is when
the argument takes us from true premises to a false conclusion.


::: {.itt rows="4"}
   ¬(P∧Q)   Q → ¬Q    ⊢     P
  -------- -------- ------ ---
     F        F       ✓     T
     T        T       ✓     T
     F        F       ✓     F
:::

On the last row, we have 'T T ⊢ F'. Oh no! **BAD BAD BAD**: the argument has
taken us from true premises to a false conclusion:

::: {.itt rows="4"}
   ¬(P∧Q)   Q → ¬Q   ⊢   P
  -------- -------- --- ---
     F        F      ✓   T
     T        T      ✓   T
     F        F      ✓   F
     T        T      ✗   F  
:::

This shows that the argument is **not truth-functionally valid**: it
misbehaves on row four. To be truth-functionally valid, an argument must
*never* misbehave.

(If you have not already done so, return to [exercise 10](#exercise-10) above and complete it,
by entering in the appropriate '✓'s and '✗'s under the turnstile.)

Here is another argument. Complete the truth table to determine whether or not
the argument is truth-functionally valid. If you run into trouble, click on
the spoiler box below to get some additional hints.

```{.TruthTable .Validity options="nocounterexample turnstilemark" points=10}
11 P<->Q, ~Q :|-: ~P
|  T T T  FT  -   FT
|  T F F  TF  -   FT
|  F F T  FT  -   TF
|  F T F  TF  -   TF
```

:::spoiler
You should have checkmarks, '✓', under the turnstile on every row of the
table:

-   On the first row, we have 'T F ⊢ F'. The argument passes the test on this
    row: it hasn't taken us from true premises to a false conclusion.
-   On the second row, we have 'F T ⊢ F'. Again, the argument passes the test:
    it hasn't taken us from true premises to a false conclusion.
-   On the third row, we have 'F F ⊢ T'. Again, the argument passes the test:
    it hasn't taken us from true premises to a false conclusion.
-   On the fourth row, we have 'T T ⊢ T'. Again, the argument passes the test. 

The only way this argument could *fail* the test on a row, and earn a '✗',
would be if the premises were all true on that row, and the conclusion false:
'T T ⊢ F'. Since that never happens, the argument passes the test on every
row, and so it is truth-functionally valid.
:::

Here is a curious example. Complete the table, by filling in the
column under the turnstile, to determine whether or not the argument is
truth-functionally valid:

```{.TruthTable .Validity options="nocounterexample turnstilemark " points=10}
12 P, ~P :|-: Q
|  T  FT  -   T
|  T  FT  -   F
|  F  TF  -   T
|  F  TF  -   F
```

:::spoiler
You should have checkmarks on each row. None of the rows are 'T T ⊢ F'.
:::

Here is an instance, in English, of this form of argument:

:::standardform
-   There are donkeys.
-   There are no donkeys.
-   This is the best of all possible worlds.
:::

Our truth table tell us that this argument is valid. But it is a weird
argument: the premises have nothing to do with the conclusion.

This is not a new thing for us. It came up in the Unit 2 reading, in the section on
[unexpected consequents of our definition of validity](02R_s22#two-unexpected-consequences-of-our-definition-of-validity){target="_blank" rel="noopener noreferrer"}. 
And it came up in the Unit 6 supplement, which included [an exercise asking you
to construct a derivation of this argument](06S_s22#exercise-19){target="_blank" rel="noopener noreferrer"}.

The truth table helps make it vividly clear why we count such an argument as
valid: it *never* takes us from true premises to a false conclusion. This is
because the two premises are truth-functionally inconsistent, and so can never
be true together on the same row. So the argument *never* takes us from true
premises, full stop: it always has at least one false premise.

Consider the principle: *from inconsistent premises anything follows*. This is
known as the [Principle of Explosion]{.vocab}, and it is a core feature of
"classical" logic. Various "non-classical" logics have been developed that
work to avoid this. [Relevance
logic](https://en.wikipedia.org/wiki/Relevance_logic){target="_blank"
rel="noopener noreferrer"} adds further constraints on validity, meant to
enforce the idea that the premises must have something to do with the
conclusion. Other [paraconsistent
logics](https://en.wikipedia.org/wiki/Paraconsistent_logic){target="_blank"
rel="noopener noreferrer"} add other constraints, meant to "contain" the
would-be explosive consequences of true contradictions. But further
investigation of non-classical logics is beyond the scope of this book.

How can there be different *truth-functional logics* that *disagree* about
which arguments are truth-functionally valid? That's like having different
*arithmetics* that disagree about whether 2 + 2 = 4, or different
*geometries* that disagree about the shape of space. Different logics
*disagree* about the nature and structure of the *following* relation that
holds between pieces of information. Logical monists insist
that there is one true logic---the one that properly describes the true nature
and structure of the *following* relation. Logical pluralists argue that there
is there is no one true logic, just as there is no one true geometry.

It is kind of mind-bending to think about how one is meant to
continue on reasoning, if there is no fact of the matter about the nature and structure
of reasoning itself. That problem is also beyond the scope of this book.

To see the force of Explosion, notice that, as long as your premises are
truth-functionally inconsistent, your conclusion can be anything, and the truth table
will still show that the argument is valid:

::: {.itt rows="4"}
   P   ¬P   ⊢   (whatever sentence you like)
  --- ---- --- ------------------------------
   T   F    ✓         (doesn't matter)
   F   T    ✓         (doesn't matter)
:::

We close this section with a few demonstration problems. A video walk-through
is provided for all of them, at the end.


```{.TruthTable .Validity options="nocounterexample turnstilemark" points=10}
13 P\/Q, ~Q :|-: P
```

```{.QualitativeProblem .MultipleChoice points=10}
14 This argument is:
| *truth-functionally valid
| not truth-functionally valid
```

::: {.youtube .manual style="width:234px;height:200px"}
<https://youtu.be/iBfu4XeK95Q>
:::


```{.TruthTable .Validity options="nocounterexample turnstilemark" points=10}
15 ~(~P/\~~Q), Q->R :|-: ~(R\/P)
```

```{.QualitativeProblem .MultipleChoice points=10}
16 This argument is:
| truth-functionally valid
| *not truth-functionally valid
```

::: {.youtube .manual style="width:468px;height:218px"}
<https://youtu.be/BY83gh0Ui5w>
:::


<!-- vim: set ft=carnap :-->
