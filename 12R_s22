---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.8/plyr.css
js: 
-   https://cdn.plyr.io/3.6.8/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
-   https://hypothes.is/embed.js
---

::: {.auto-tally}
:::

::: cover

# Predicate Logic (PL)

::: illustration
![Everything
Is](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/everything_is.gif){alt='Benny
the spaceman from the Lego Movie screams. Caption says "Everything Is".'}
:::

:::epigraph
Some are born great, some achieve greatness,
and some have greatness thrown upon 'em.

[Shakespeare, [Twelfth Night](https://shakespeare.folger.edu/?p=984){target="_blank"
rel="noopener noreferrer"}]{.source}
:::
:::


This chapter introduces [Predicate Logic (PL)]{.vocab}, an extension of the [Sentential
Logic (SL)]{.vocab} we've studied in earlier chapters. The specific learning objectives for
this chapter are:

a.  I can parse symbolic formulas, identifying the main connective, and
    identifying the scope of each connective.
b.  I can identify which variables in a formula are free and which are
    bound
c.  I can identify instances of generalizations, and generalizations of
    instances

## The Limits of SL

In Sentential Logic, the basic units of logical form are the atomic sentence letters, P, Q, R,....
These units are then combined, glued together using connectives, to form molecular sentences.
But this approach to logical form it limited.

Consider this argument:

::: standardform
-   Everything is awesome
-   Benny is awesome
:::

This argument is valid in virtue of its logical form. Here is another argument with the same form:

::: standardform
-   Everything is cool
-   Lucy is cool
:::


```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
1 Can you give another example of an argument of the same form?
```

Is the subject of your conclusion a *singular* or *general* term?
A singular term is a noun or noun phrase that by design refers just to a single object.
Proper names, like 'Taylor Swift' and 'Normal, IL' are singular terms.
Also, phrases beginning with 'the', like 'the tallest player in the NBA'.
A general term is a noun or noun phrase that by design refers to a type or group of things.
Common nouns, like 'frogs', 'mud', and 'logic classes' are all general terms.

The two examples I gave above used the singular terms, 'Benny' and 'Lucy'.
Here are two examples that using general terms:

:::standardform
-   Everything is weird.
-   Mud is weird.
:::

:::standardform
-   Everything is weird.
-   Logic classes are weird.
:::

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
2 Does the subject of the conclusion of the example you gave in answer to (1) a singular or general term?
```

In English, these all look like they share the same logical form.
But, as we will see, the logic of singular terms is quite different from the
logic of general terms.

## Old Methods

Remember how we handled phrases like 'all of us' and 'some of us' in [Chapter
9](09R_s22#quantification), using 'and' and 'or'?
We can apply that same trick here, but first we need a comprehensive list of all things.
Given such a list, we can render 'Everything is awesome' as:

:::displayed
-   Benny is awesome and Lucy is awesome and Emmet is awesome and Unikitty is
    awesome and Batman is awesome and ....
:::

And we can render 'Something is awesome' as:

:::displayed
-   Benny is awesome or Lucy is awesome or Emmet is awesome or Unikitty is
    awesome or Batman is awesome or ....
:::

Then, armed with an appropriate scheme of abbreviation, we can render this in SL:

:::soa
| P: Benny is awesome
| Q: Lucy is awesome
| R: Emmet is awesome
| S: Batman is awesome
| U: Unikitty is awesome
| ⋮
:::

:::display
-   Everything is awesome: P∧Q∧R∧S∧U∧...
:::

So then our argument is:

:::standardform
-   P∧Q∧R∧S∧U∧...
-   P
:::

And that looks like something we can derive using repeated applications of S.
This method will work, assuming that there are only finitely many things, and
assuming that we can actually compile a complete list of all those things, each with
a unique name.

Unfortunately, neither of those assumptions hold.
Consider the claim that,

:::displayed
-   Every natural number is odd or even.
:::

Let our scheme be:

:::soa
| P<sub>1</sub>: The number 1 is odd or even.
| P<sub>2</sub>: The number 2 is odd or even.
| P<sub>3</sub>: The number 3 is odd or even.
| P<sub>4</sub>: The number 4 is odd or even.
| ⋮
:::

Then our translation looks something like this:

:::displayed
-   P<sub>1</sub>∧P<sub>2</sub>∧P<sub>3</sub>∧P<sub>4</sub>...
:::

But this is not a well-formed sentence in SL:
 it doesn't have a main connective.
(Given our lefty rule, its main connective would be the left-most '∧',
 but there is no left-most '∧'.)
Our syntax allows us to make infinitely many conjunctions:

:::displayed
-   (P<sub>1</sub>∧P<sub>2</sub>)
-   ((P<sub>1</sub>∧P<sub>2</sub>)∧P<sub>3</sub>)
-   (((P<sub>1</sub>∧P<sub>2</sub>)∧P<sub>3</sub>)∧P<sub>4</sub>)
-   ⋮
:::

But our syntax does not allow us to make a conjunction that is infinitely long.

## New Methods: Splitting the Atom(ic Sentences)

Suppose your stoner friend, while high, says,

:::displayed
-   Everything is so cosmic!
:::

You ask him what he means, and he replies: "Everything dude: The number 1 is so cosmic! The number 78 is so cosmic! Big Freedia is so cosmic! Your dad is so cosmic! This cheeto is so cosmic! That cat is so cosmic..." And he just keeps going.

:::illustration
![Cosmic Cheeto Cat](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/cosmic_cheeto_cat.gif)
:::

His list is both long and repetitive. Each item in the list applies the same predicate to a different singular term. The predicate is:

::: {.displayed}
-   []{.blank} is so cosmic.
:::

The singular terms are 'The number 1', 'The number 78', 'Big Freedia', 'Your dad', 'This cheeto', 'That cat' and so on.
You can think of each item on his list as generated by attaching the predicate to each of these singular terms.

::: {.displayed}
-   [The number one]{.blank} is so cosmic.
-   [The number 78]{.blank} is so cosmic.
-   [Big Freedia]{.blank} is so cosmic.
-   ⋮
:::

But suppose instead we attach the predicate to a [variable]{.vocab}:

::: {.displayed}
-   [*x*]{.blank} is so cosmic.
:::

Then we can capture your stoner friend's sentiment in this way:

::: {.displayed}
-   The formula '[*x*]{.blank} is so cosmic' is true for every value of *x*.
:::

Note that, much to your friend's satisfaction, this allows us to include values of *x* for which we have no names. ("Dude! I hadn't even though of things that have no names. Woah!")

This, then, will be our method for dealing with words like 'Every', Some', and 'None'.

## Predicates and Constants

We start with an overly simplified idea about the structure of simple
sentences in natural languages. The idea is that each simple sentence has two
parts: a subject, and a predicate. The subject of a simple sentence is
always a [constant]{.vocab}: a singular term that always refers to the same thing, like
'Taylor Swift', 'the Pacific Ocean', or 'the first female president of ISU'.
The predicate is a verb or verb phrase. It is used to say what the subject is like, or what
the subject is doing.

For example,

::: displayed
-   [Thundercat]{.blank} is sleepy.
:::

Here, the subject is 'Thundercat', and the predicate is '[]{.blank} is sleepy'. Again,

::: displayed
-   [Thundercat]{.blank} plays bass.
:::

The subject is 'Thundercat', and the predicate is 'plays bass'.

In our artificial language, PL, we use lowercase letters to represent
constants, and capital letters to represent predicates. PL is an extension of
SL: we are *adding* more vocabulary and structure to the language we already
have. SL already uses capital letters 'P' through 'W' as sentence letters. We
will use capital letters 'F' through 'O' as predicate letters. And we will use
lowercase letters 'a' through 'e' as constants.

:::vaside
-   [Predicate letters]{.vocab} are capital letters '*F*' through '*O*',
    optionally with numerical subscripts.
-   [Constants]{.vocab} are lowercase letters, '*a*' through '*e*', optionally
    with numerical subscripts.
:::

So here is what as scheme of abbreviation for PL looks like:

:::soa
| F: []{.blank} is sleepy
| G: []{.blank} plays bass
| a: Thundercat
| b: Taylor Swift
:::

The scheme assigns each predicate letter to a predicate of English,
 and it assigns each constant to an individual thing.

Using this scheme, we can render simple sentences in English into PL:

::: displayed
-   F(a): Thundercat is sleepy.
-   G(b): Taylor Swift plays bass.
:::

Notice the syntax. In English, we tend to begin a sentence with its subject,
followed by its predicate. In PL, we begin with the predicate, followed by the
subject. And we put the subject in parentheses. This syntax is meant to
suggest the familiar '*f(x)*' notation from mathematics, for applying a *function* to an
*argument*.

:::wrapper
:::soasticky
| F: []{.blank} is sleepy
| G: []{.blank} plays bass
| a: Thundercat
| b: Taylor Swift
:::

```{.Translate .FOL points=10}
3 G(a): Thundercat plays bass.
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.5.mp4)
:::

```{.Translate .FOL points=10}
4 F(b): Taylor Swift is sleepy.
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.6.mp4)
:::

Simple sentences constructed from a predicate and a constant, like 'F(a)', are
atomic. That is, they can be glued together, using our connectives, just like
'P's and 'Q's, to form molecular sentences:

::: displayed
-   ¬F(a): Thundercat is not sleepy
-   G(a)∧G(b): Thundercat plays bass and Taylor Swift play bass: G(a)∧G(b)
:::

Notice how these sentences work. In '¬F(a)', '¬' is the main connective, and it attaches to 'F(a)', which is an atomic sentence, constructed by applying the predicate 'F' to the constant 'a'. In 'G(a)∧G(b)', '∧' is the main connective, and it connects 'G(a)' and 'G(b), each of which is an atomic sentence. 'G(a)' is constructed by applying the predicate 'G' to the constant 'a'. 'G(b)', by applying the predicate 'G' to the constant 'b'.

If you are tempted to write something like 'F(¬a)', don't. You cannot apply negation, '¬', to a constant. You can only apply it to a *sentence*. So, to express 'Thundercat is not sleepy', we first construct the atomic sentence, 'F(a): Thundercat *is* sleepy', and then we negate that atomic sentence: '¬F(a)'.

If you are tempted to write something like 'G(a)G(b)' or 'G(a∧b)', don't. The first, 'G(a)G(b)', is two atomic sentences smooshed together without a connective. It is no more a sentence in PL than 'PQR' is a sentence in SL. The second, 'G(a∧b)', attempts to conjoin the constants, 'a' and 'b'. But conjunction is a sentential connective: it can only connect *sentences*. So, to express 'Thundercat plays bass and Taylor Swift plays bass', we first construct two atomic sentences, 'G(a)' and 'G(b)', and then cojoin them, using '∧'.

:::

:::wrapper
:::soasticky
| F: is sleepy
| G: stayed up all night dancing
| a: Liam
| b: Harry
| c: Zayn
:::


```{.Translate .FOL points=10}
5 G(a)/\G(b)/\G(c): Liam, Harry, and Zayn stayed up all night dancing
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.7.mp4)
:::

```{.Translate .FOL points=10}
6 F(a)/\~F(b) : Liam is sleepy but Harry is not
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.8.mp4)
:::

```{.Translate .FOL points=10}
7 G(a)->F(a): If Liam stayed up all night dancing, then Liam is sleepy
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.9.mp4)
:::

```{.Translate .FOL points=10}
8 ~G(c)->~F(c): Zayn is not sleepy if he didn't stay up all night dancing 
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.10.mp4)
:::

:::

## Variables and Formulas

A [constant]{.vocab} is a singular term that always refers to the same thing. 
A [variable]{.vocab} is a term that can be assigned different values.
For variables, we use lowercase letters '*v*' through '*z*'. 

:::vaside
[Variables]{.vocab} are lowercase letters, '*v*' through '*z*', optionally
with numeric subscripts.
:::

Anywhere you use a constant, you can also use a variable:

::: displayed
-   F(x): x is tired
-   G(y): y stayed up all night partying
:::

We call 'F(x)' and 'F(y)' [formulas]{.vocab}, but not sentences.
They aren't sentences, because it doesn't make sense to ask whether or not they are true, full stop.
Instead, it only makes sense to ask whether or
not they are true *on a given assignment* of some value to the variable.


```{.QualitativeProblem .MultipleSelection points=10}
9 Normal is in Illinois
| *True
| False
| 'Normal is in Illinois' is not a sentence
10 x is in Illinois
| True
| False
| *Not a sentence
11 San Francisco is in Illinois
| True
| *False
| 'San Francisco is in Illinois' is not a sentence
12 x is less than 4
| True
| False
| *'x is less than 4' is not a sentence
13 x is less than 4, where x is assigned 2 as its value
| *True
| False
| *'x is less than 4' is not a sentence
```

'F(x)' and 'F(y)' and so on are *atomic* formulas. Just as we can combine atomic sentences, using our connectives, to build molecular sentences, we can combine atomic formulas, using our connectives, to build molecular formulas.

:::wrapper
:::soasticky
| F: is a frog
| G: is green
:::


```{.Translate .FOL points=10}
14 F(x)/\G(x): x is a frog and x is green
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.16.mp4)
:::

```{.Translate .FOL points=10}
15 F(x)/\G(y): x is a frog and y is green
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.17.mp4)
:::

```{.Translate .FOL points=10}
16 ~F(x)/\~F(y): x is not a frog and y is not a frog 
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.18.mp4)
:::

```{.Translate .FOL points=10}
17 F(x)->G(x): If x is a frog then x is green
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.19.mp4)
:::

:::

## Quantifiers

In English, we have a variety of quantificational words and phrases: 'every', 'some', 'none', 'all' 'many', 'most', 'at least one'....

In PL, we have two [quantifiers]{.vocab}:

The [universal quantifier]{.vocab}
:   '∀': this can be read as 'for all' or 'for every'.

The [existential quantifier]{.vocab}
:   '∃': this can be read as 'for some' or 'there exists'.

The universal quantifier looks like an upside down 'A'. You can think of the
'A' as standing for 'all'. The existential quantifier looks like a backwards 'E'. 
You can think of the 'E' as standing for 'exists'.

We use our quantifiers with variables. 
To use a quantifier, we combine it with a variable to form a [quantifier phrase]{.vocab},
 and then we prefix that quantifier phrase to a formula.
For example, '∀x' is a quantifier phrase, which can be read as 'Every x is such that'. 
We can prefix it to the formula, 'F(x)', giving us:

:::displayed
-   ∀xF(x): Every x is such that x is F.
:::

And '∃y' is a quantifier phrase, which can be read as 'Some y is such that':

:::displayed
-   ∃yF(y): Some y is such that y is F.
:::

:::wrapper
:::soasticky
| G: is good
| b: Bridger
:::

Or, again:

::: displayed
-   ∀xG(x): Every x is such that x is good.
-   ∃x¬G(x): Some x is such that x is not good.
:::

These aren't quite English sentences, because English doesn't have variables.
The closest thing to a variable in English is a pronoun:

::: displayed
-   ∀xG(x): Every x is such that x is good.
-   ∀xG(x): Every thing is such that *it* is good.
:::

::: displayed
-   ∃x¬G(x): Some x is such that x is not good.
-   ∃x¬G(x): Some thing is such that *it* is not good.
:::

This gets us English, but not idiomatic English. Idiomatic English prefers a much simpler construction:

::: displayed
-   ∀xG(x): Everything is good.
-   ∃xG(x): Something is good.
:::

But idiomatic English *hides* and *obscures* important differences in logical form. 
The sentence 'Everything is good' *looks like* it has the same grammatical form as the sentence 'Bridger is good'.
But 'Bridger' is a constant, while 'Everything' is a quantificational phrase.
PL displays and clarifies this difference in logical form:

:::displayed
-   ∀xG(x): Everything is good.
-   G(b): Bridger is good.
:::
:::

:::wrapper
:::soasticky
| F: is funny
| G: is goofy
:::

(Your keyboard doesn't have keys for '∃' or '∀'. Use "E" for '∃', and "A" for '∀'.)

```{.Translate .FOL points=10} 
18 AxF(x) : Every thing is such that it is funny.
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.20.mp4)
:::

```{.Translate .FOL points=10} 
19 ExG(x) : Some thing is such that it is goofy.
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.21.mp4)
:::

```{.Translate .FOL points=10} 
20 ~AxF(x) : Not every thing is such that it is funny.
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.22.mp4)
:::

```{.Translate .FOL points=10} 
21 AxG(x) : All things are goofy.
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.23.mp4)
:::

```{.Translate .FOL points=10} 
22 Ex~F(x) : Some things are not funny.
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.24.mp4)
:::

```{.Translate .FOL points=10} 
23 ExF(x)/\Ex~F(x): Some things are funny and some things aren't.
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.25.mp4)
:::

:::

## Official Syntax 

We call our extended language PL, for "Predicate Logic". It is an extension of SL.
Here are the symbols of PL:

1. [Sentence letters]{.vocab}, '$P,Q,\ldots,W'$ 
2. [Terms]{.vocab}, which come in two types:
    -  [constants]{.vocab}: "$a,b,c,d,e$"
    -  [variables]{.vocab}: "$v,w,x,y,z$"
3. [Predicate letters]{.vocab}: $F,G,\ldots,O,$
4. [Sentential connectives]{.vocab}: '¬, ∧, ∨, →, ↔'
5. [Quantifiers]{.vocab}: '∀' and '∃'
6. Left and right parentheses.

Officially, sentence letters, terms, and predicates can all have numerical
subscripts, so we don't have to worry about running out.

A [quantifier phrase]{.vocab} is quantifier followed by any variable (e.g., '∀x' and '∃z').

In SL, the atomic sentences are the sentence letters. In PL, we have two types of [atomic formula]{.vocab}:

-   Each sentence letter is an atomic formula.
-   Any predicate letter followed by any term in parentheses (e.g., 'F(a)') is an atomic
    formula.

Here, then, is our definition of a [formula]{.vocab} in PL:

:::liveshapes
1.  Every atomic formula is a formula.
2.  If []{.P} and []{.Q} are both formulas, then:
    a.  ¬[]{.P} is a formula,
    b.  ([]{.P} ∧ []{.Q}) is a formula,
    c.  ([]{.P} ∨ []{.Q}) is a formula,
    d.  ([]{.P} → []{.Q}) is a formula,
    e.  ([]{.P} ↔ []{.Q}) is a formula,
3.  If []{.S} is a quantifier phrase, and []{.P} is a formula, []{.S}[]{.P} is a formula. 
:::

Just as we did in Unit 3, we can explore the syntax of a given formula by parsing it into a tree.
Here is the tree for '∀x(F(x)∧G(x))':

:::illustration
![Tree for ∀x(F(x)∧G(x))](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/AxKFxGx.png)
:::

At the top node, we have our formula, '∀x(F(x)∧G(x))'. This was constructed, by rule (3), by attaching the quantifier phrase, '∀x', to the formula '(F(x)∧G(x))'. And that formula was constructed, by rule (2b), from 'F(x)' and 'G(x)', which are both atomic formulas.

Here is the tree for '(∀xF(x)∧∀xG(x))':

:::illustration
![Tree for (∀xF(x)∧∀xG(x))](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/KAxFxAxGx.png)
:::

At the top node, we have our formula, '(∀xF(x)∧∀xG(x))'. This was constructed, by rule (2b), from '∀xF(x)' and '∀xG(x)'.
'∀xF(x)' is constructed, by rule (3), by attaching the quantifier phrase '∀x' to the atomic formula 'F(x)'. And, similarly, '∀xG(x)' is constructed by rule (3), attaching '∀x' to 'G(x)'.

As always, the [main connective]{.vocab} of a formula is the last connective added. 
What's new is that, in some cases, the main connective will be a 
quantifier phrase instead of a sentential connective.
So, for example, the main connective of '∀x(F(x) ∨ G(x))' is the quantifier phrase, '∀x'.
By contrast, here the main connective of '(∀xF(x) ∨ ∀xG(x))' is the disjunction, '∨'.

When the main connective of a formula is a quantifier phrase, we call that
formula a [generalization]{.vocab}. When it is an existential quantifier
phrase, we call it an [existential generalization]{.vocab}, and when it is a
universal quantifier phrase, we call it a [universal generalization]{.vocab}.

Unfortunately, Carnap does not yet support parsing problems for PL.

```{.QualitativeProblem .MultipleChoice points=10}
24 The formula '∀xF(x)∧G(x)' is a
| universal generalization
| existential generalization
| *conjunction
25 The formula '∀x(F(x)∧G(x))' is a
| *universal generalization
| existential generalization
| conjunction
26 The formula '¬∃x(F(x)→G(x))' is a
| universal generalization
| existential generalization
| *negation
| conditional
27 The formula '∃x(F(x)∨G(x))' is a
| universal generalization
| *existential generalization
| disjunction
```

::: youtube
<https://youtu.be/LAQK4OBpd1Y>
:::

## Informal Notation

Our conventions for informal notation remain the same, and remain in force.
So, for example,

:::displayed
-   ∀(x)(F(x) ∧ G(x) → H(x) ∨ I(x))
:::

is informal notation for,

:::displayed
-   ∀(x)((F(x) ∧ G(x)) → (H(x) ∨ I(x)))
:::

Note that quantifier phrases, like negations, function as *prefixes*.
Like negations, they do not introduce a surrounding pair of parentheses:

:::displayed
-   ¬P, [(¬P)]{.xed}
-   ∀xF(x), [(∀xF(x))]{.xed}
:::

And, like negations, they only get to be the main connective when they are all
the way out front of the entire formula.

## Scope 

A complex formula can have several connectives and quantifier phrases. One
is the *main connective*, and it governs the whole
sentence. But also, each connective or quantifier phrase is the main
connective of some part of the formula, and it governs that part of the
sentence. 

For example, in the sentence,

:::displayed
-   P ∧ Q → R ∨ S
:::

the '→' is the main connective for the whole sentence, the '∧' is the main
connective of the antecedent, 'P ∧ Q', and the '∨' is the main connective of the
consequent, 'R ∨ S'.

We call *the part of a sentence or formula for which a connective or quantifier phrase is the main connective* the [scope]{.vocab} of that connective.

Scope
:   The [scope]{.vocab} of a connective or quantifier phrase is the part of
    the formula for which it is the main connective.

So the *scope* of '∧' in 'P ∧ Q → R ∨ S' is 'P ∧ Q', and the scope of '→' is the entire sentence, 'P ∧ Q → R ∨ S'.

We can use the concept of scope to describe the difference between these two sentences:

:::displayed
-   ¬P → Q
-   ¬(P → Q)
:::

In the first, the scope of the negation is just the antecedent, '¬P'.
In the second, the scope of the negation is the entire sentence, '¬(P → Q)'.

And we can use the concept of scope to describe the difference between these two formulas:

:::displayed
-   ∀xF(x) → G(x) 
-   ∀x(F(x) → G(x))
:::

In the first, the scope of the quantifier is just the antecedent, '∀xF(x)'.
In the second, the scope of the quantifier is the entire formula, '∀x(F(x) → G(x))'.

```{.QualitativeProblem .MultipleChoice points=10}
28 In the formula, '¬(P∧Q)', the scope of the '¬' is:
| *'¬(P∧Q)'
| 'P∧Q'
| '¬P'
29 In the formula, '¬P∧Q', the scope of the '¬' is:
| '¬(P∧Q)'
| 'P∧Q'
| *'¬P'
30 In the formula, 'F(x)↔∀xG(x)', the scope of '∀x' is:
| 'F(x)↔∀xG(x)'
| *'∀xG(x)'
| 'G(x)'
31 In the formula, '∀x(F(x)↔G(x))', the scope of '∀x' is:
| *'∀x(F(x)↔G(x))'
| '∀xF(x)
| '(F(x)↔G(x))'
```

::: {.youtube}
<https://youtu.be/NKqbAiBiH80>
:::

``` {.Translate .FOL .Exact points="10"}
32 AxH(x): What is the scope of the '∀x' in 'P∨∀xH(x)'?
33 EyF(y): What is the scope of the '∃y' in '∃yF(y)∨∀xH(x)'?
34 Ey(F(y)\/AxH(x)): What is the scope of the '∃y' in '∃y(F(y)∨∀xH(x))'?
35 AyExF(x): What is the scope of the '∀y' in '∃z∀y∃xF(x)'?
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.34-37.mp4)
:::

## Scope and Binding

Quantifier phrases [bind]{.vocab} occurrences of variables that in are within their scope.
For example, in this formula, the quantifier phrase '∀x' binds all three occurrences of the variable 'x':

:::displayed
-   ∀x(F(x) ↔ G(x))
:::

But in this formula, the quantifier phrase '∀x' only binds the first two occurrences of 'x':

:::displayed
-   ∀xF(x) ↔ G(x)
:::

It does not bind the last occurrence of 'x', in 'G(x)', because that occurrence is not within its scope.

A quantifier phrase can only bind occurrences of *its* variable: 
 '∀x' can only bind occurrences of 'x'; 
 '∃y' can only bind occurrences of 'y'.
So, in this formula, the quantifier phrase '∃z' only binds the occurrences of 'z', not the occurrence of 'x':

:::displayed
-   ∃z(F(x) ∨ G(z))
:::

And a quantifier phrase cannot bind an occurrence of a variable 
 that *is already bound* by another quantifier phrase.
For example, in this formula, the quantifier phrase '∃x' does not bind the 'x' in 'G(x)',
 because it is already bound by the quantifier phrase '∀x': 

:::displayed
-   ∃x(F(x) ∧ ∀xG(x))
:::

What do I mean by "already"? 
How do we know what *order* the quantifiers bind in?
Quantifiers bind in the order that the formula is constructed,
 syntactically, by our rules.
So, again, it can be helpful to think about this in terms of trees:

:::illustration
![Tree for ∃x(F(x) ∧ ∀xG(x))](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/ExKFxAxGx.png)
:::

Working our way up the syntactic tree for '∃x(F(x) ∧ ∀xG(x))', at an early
stage, the '∀x' gets attached to 'G(x)', forming '∀xG(x)'. At this point, both
of those occurrences of 'x' are bound by the '∀x'. So, when we reach the top
of the tree, where '∃x' is added, those occurrences of 'x' are already bound.

So, to summarize and make precise:

Bound variables
:   A quantifier phrase [binds]{.vocab} every occurrence of the variable that
    it quantifies over, that is within its scope, and that isn't already bound
    by another quantifier phrase.

Finally, two more definitions:

Free
:   A variable occurrence that is not bound is [free]{.vocab}

So, the first occurrence of 'x' in this formula
is free, while the second and third occurrences are bound:

:::displayed
-   F(x) ∧ ∃[x]{.wavy}G([x]{.wavy})
:::

Sentence
:   A formula with no free variable occurrences is a [sentence]{.vocab}

Recall we don't call the formula F(x), 'x is cosmic' a *sentence*,
 because it isn't true or false, full stop,
 but only true or false relative to an assignment of some value to the variable *x*.
That's because, in this formula, 'x' occurs free.
On the other hand, 'x' doesn't occur free in the formula, ∀xF(x): 'Every x is such that x is cosmic'.
So this formula is true or false, full stop, and it is a sentence.

Recall we don't call the formulas "sentences", 
 because they aren't true or false, full stop,
 but only true or false relative to an assignment of some value to the variable *x*.

For example, this formula is only true or false relative to an assignment of some value to the variable 'x':

:::displayed
-   I(x): x is in Illinois
:::

This is true when the value of 'x' is Watterson Towers, but false when the value of 'x' is the Epcot Center.

This is because, in this formula, 'x' occurs free.
When 'x' is bound by a quantifier, we get a sentence, which is true or false full stop:

:::displayed
-   ∃xI(x): Something is in Illinois
:::


```{.QualitativeProblem .MultipleChoice points=10}
36 'F(x)∧G(x)' is
| a sentence but not a formula
| *a formula but not a sentence
| both a formula and a sentence
37 '∃xF(x)∧G(x)' is
| a sentence but not a formula
| *a formula but not a sentence
| both a formula and a sentence
38 '∃xF(x)∧∃xG(x)' is
| a sentence but not a formula
| a formula but not a sentence
| *both a formula and a sentence
```

:::hint
Note that every sentence is a formula, but not every formula is a sentence. So
for each of these questions, the first option, 'a sentence but not a formula',
can be eliminated.
:::

:::solution
::: youtube
<https://youtu.be/VEsDYjx7BOo>
:::
:::


## Instances

:::wrapper
:::soasticky
| F:  is flat.
| G:  is real.
| a:  Kansas
| b:  Earth
:::

This argument is valid:

::: standardform
-   F(a): Kansas is flat.
-   ∃xF(x): Something is flat.
:::

The premise is an [instance]{.vocab} of the conclusion.
The conclusion says that *something* is flat.
The premise says that *Kansas* is flat.
Since Kansas counts as something, the conclusion follows from the premise.

A bit more formally, '∃xF(x)' says that, for at least one value of 'x', 'F(x)'
is true. And 'F(a)' says that 'F' is true of Kansas. So, since 'F' is true of
Kansas, 'F(x)' is true for at least one value of 'x'.

This argument is not valid:

::: standardform
-   F(a): Kansas is flat.
-   ∀xF(x): Everything is flat.
:::

Again, the premise is an [instance]{.vocab} of the conclusion.
The conclusion says that *everything* is flat.
The premise says that *Kansas* is flat.
So the premise tells us that *one* thing is flat,
 but not that *all* things are flat.

Again, a bit more formally, '∀xF(x)' says that, for *every* value of 'x',
'F(x)' is true. 'F(a)' tells us that 'F' is true of *one* value of 'x', but we
can't infer from this that 'F' is true of *every* value of 'x'.

This argument is valid:

::: standardform
-   ∀xF(x): Everything is flat.
-   F(a): Kansas is flat.
:::

This time, the conclusion is an [instance]{.vocab} of the premise. The premise tells us that 'F(x)' is true for *every* value of 'x'.
So it follows that 'F' is true of Kansas.

But this argument is not valid:

::: standardform
-   ∃xF(x): Something is flat.
-   F(a): Kansas is flat.
:::

Again, the conclusion is an [instance]{.vocab} of the premise. But this time, the premise only tells us that 'F(x)' is true of *at least one* value of 'x'. It gives us no reason to believe that it is true of *Kansas* in particular.

:::

We will understand the *logic* of generalizations in terms of
 this relationship between generalizations and instances.

To construct an \[instance}{.vocab} of a generalization, you remove the
quantifier phrase and uniformly replace the once-bound variable occurrences
with a term.

For example, starting with the generalization,

::: displayed
-   ∀x(F(x) ∧ G(x))
:::

we first remove the quantifier phrase,

::: displayed
-   (F(x) ∧ G(x))
:::

This frees both 'x's, which were once bound by the '∀x'. So we replace both of those 'x's with a term:

::: displayed
-   (F(a) ∧ G(a))
-   (F(b) ∧ G(b))
-   (F(c) ∧ G(c))
-   (F(y) ∧ G(y))
-   (F(z) ∧ G(z))
:::

Remember, a [term]{.vocab} is a constant or variable. So we can replace the
'x's with a constant, like 'a', or a variable, like 'y'. Also, we can replace
the 'x's with *any* term, and 'x' is a term. So we can replace the 'x's with
'x's:

::: displayed
-   (F(x) ∧ G(x))
:::

Our replacement must be *uniform*. That is, we can't replace some of the 'x's
with one term, and other 'x's with another term. So these are not instances of
our generalization:

:::{.displayed}
-   [(F(a) ∧ G(b))]{.xed}
-   [(F(x) ∧ G(y))]{.xed}
:::

There are a couple of complications. First, you must make sure that you *only*
replace the variables that were bound by the quantifier phrase you've removed. For
example, if our generalization is:

::: displayed
-   ∃y(F(a) → G(y))
:::

we can only replace the 'y', not the 'a', because the 'a' isn't a variable
that was bound by '∃y'. So this is not an instance:

::: {.displayed} 
-   [F(b) → G(b)]{.xed}
:::

But these are all instances:

::: displayed
-   F(a) → G(a)
-   F(a) → G(b)
-   F(a) → G(x)
:::

This can get confusing when there are overlapping quantifier
phrases:

::: displayed
-   ∀x(F(x) → ∃xG(x))
:::

The 'x's in '∃xG(x)' are not bound by '∀x'. So, when constructing instances,
 they cannot be replaced. Only the 'x' in 'F(x)' gets replaced:

::: displayed
-   F(a)→∃xG(x)
-   F(b)→∃xG(x)
-   F(x)→∃xG(x)
-   F(y)→∃xG(x)
-   [F(a)→∃aG(a)]{.xed}
-   [F(b)→∃xG(b)]{.xed}
-   [F(y)→∃yG(y)]{.xed}
:::

There is a second complication, also caused by quantifier phrases with
overlapping scope. Consider:

:::displayed
-   ∀x(F(x) → ∃y(G(y) ∧ H(x)))
:::

The main connective is the '∀x'. So we remove it:

:::displayed
-   F(x) → ∃y(G(y) ∧ H(x))
:::

Both 'x's are now free, and we can replace them with any term we want:

:::displayed
-   F(a) → ∃y(G(y) ∧ H(a))
-   F(b) → ∃y(G(y) ∧ H(b))
-   F(x) → ∃y(G(y) ∧ H(x))
-   F(z) → ∃y(G(y) ∧ H(z))
:::

But there is one term that we can't use:

:::{.displayed} 
-   [F(y) → ∃y(G(y) ∧ H(y))]{.xed}
:::

Notice that, when replace that second 'x' with 'y', it gets "captured" by the
quantifier, '∃y', and so is bound, not free. When constructing an instance,
if you choose to replace the once-bound variables with another variable, you
must make sure that the new variable *remains free*, and is *not captured* by
another quantifier.

```{.QualitativeProblem .MultipleSelection points=10}
39 Select all of the instances of the generalization, '∃xF(x)'.
| *'F(a)'
| '∃aF(a)'
| *'F(x)'
40 Select all of the instances of the generalization, '∃x(F(x)∨G(x))'?
| *'F(a)∨G(a)'
| 'F(a)∨G(b)'
| 'F(b)∨G(a)'
| *'F(x)∨G(x)'
| *'F(y)∨G(y)'
| 'F(x)∨G(y)'
41 Select all of the instances of the generalization, '∀x(F(x)∨G(a))'?
| 'F(a)∨G(b)'
| *'F(b)∨G(a)'
| *'F(a)∨G(a)'
| *'F(x)∨G(a)'
| 'F(a)∨G(x)'
42 Select all of the instances of the generalization, '∀x∃y(F(x)→G(y)∨G(x))'?
| *'∃y(F(x)→G(y)∨G(x))'
| *'∃y(F(a)→G(y)∨G(a))'
| '∃y(F(y)→G(y)∨G(y))'
| '∃x(F(y)→G(x)∨G(y))'
| *'∃y(F(z)→G(y)∨G(z))'
```

::: {.youtube}
<https://youtu.be/Q7lsLOu4_yI>
:::

::: {.youtube }
<https://youtu.be/0C1CE8wBl-8>
:::


``` {.Translate .FOL .Exact points="10"}
43 F(a),F(b),F(c),F(d),F(e),F(v),F(w),F(x),F(y),F(z): Provide an instance of the generalization, '∀xF(x)'
44 F(a)/\G(a), F(b)/\G(a), F(c)/\G(a), F(d)/\G(a), F(e)/\G(a), F(v)/\G(a), F(w)/\G(a), F(x)/\G(a), F(y)/\G(a), F(z)/\G(a): Provide an instance of the generalization, '∀x(F(x)/\G(a))'
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R12.45-46.mp4)
:::

## Constructing a generalization from an instance

Now we flip the process from the previous section on its head, and consider
what happens when we want to construct a generalization from an instance.

Consider the sentence,

::: displayed
-   F(a) ∧ G(a)
:::

What generalizations is this an instance of? Here is one:

::: displayed
-   ∀x(F(x) ∧ G(x))
:::

Removing the quantifier frees both of the 'x's, which we can uniformly replace
with 'a's, getting us 'F(a) ∧ G(a)'. So 'F(a) ∧ G(a)' is an instance of this
generalization.

It is also an instance of these generalizations, for the same reason:

::: displayed
-   ∀y(F(y) ∧ G(y))
-   ∃x(F(x) ∧ G(x))
:::

What about this one?

::: displayed
-   ∃y(F(a) ∧ G(y))
:::

Yes: when we drop the quantifier phrase, '∃y', we are left with 'F(a) ∧ G(y)'.
We can then replace the 'y' with any term we like. Replacing it with 'a' gets
us 'F(a) ∧ G(a)'.

When you are constructing an instance, you need to *uniformly* replace the
once-bound variables with the same term. But when you flip that on its head,
and consider the process of generalizing from an instance, you are allowed to
pick and choose which terms to replace with a now-bound variable. This isn't
because there are two different underlying rules about what counts as an
instance. It's just because a uniform replacement, when moving from a
generalization to an instance, can look like "picking and choosing" when run
in reverse, from instance to generalization.

Although you can "pick and choose", you have to always pick instances of the
same term. You cannot replace both an 'a' and a 'b' with a bound variable. So
you can't generalize from the first formula below to the second:

:::{.displayed }
-   F(a) ↔ G(b)
-   [∀x(F(x) ↔ G(x))]{.xed}
:::

To see this, try to work it backwards: remove the quantifier phrase, '∀x'; you are now required to
*uniformly* replace the now-free 'x's. Replacing one of them with 'a' and the other with 'b' is not allowed.

Here is a weird example. 

::: displayed
-   F(a) ∨ G(a)
-   ∀x(F(a) ∨ G(a))
:::

Convince yourself that 'F(a) ∨ G(a)' is an instance of '∀x(F(a) ∨ G(a)': remove the quantifier phrase; now uniformly replace all the once-bound occurrences of 'x'. But there aren't any, so there is nothing to replace, leaving you with 'F(a) ∨ G(a)'.

So, when constructing a generalization from an instance, the process looks
like this:

-   Uniformly replace some or all or none(!) of the occurrences of a term in
    the formula with a variable. (Be sure to choose a variable that remains free, and doesn't get
    captured.)
-   Add a quantifier phrase over that variable to the beginning of the
    formula.


```{.QualitativeProblem .MultipleSelection points=10}
45 Select all of the generalizations that have 'F(a)' as an instance.
| *∀xF(x)
| *∀zF(z)
| ∀aF(a)
| *∃xF(a)
46 Select all of the generalizations that have '~(F(a)↔G(a))' as an instance.
| *'∀x~(F(a)↔G(a))'
| *'∀x~(F(x)↔G(a))'
| *'∀x~(F(x)↔G(x))'
| '∀x~(F(y)↔G(y))'
| *'∀y~(F(y)↔G(y))'
```

<!-- vim: set ft=carnap :-->

