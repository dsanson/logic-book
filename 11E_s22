---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.8/plyr.css
js: 
-   https://cdn.plyr.io/3.6.8/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
---


::: {.auto-tally}
:::

# Derived Rules: Exercises

The reading was about *enabling derived rules*. 
These exercises are mostly about *using* those rules.
I've offered hints about what derived rules you might consider using.
By default the hints are hidden, to give you the chance to figure it out for
yourself.

:::{.hint .aside}
1 is much easier if you use the appropriate instance of DM on the first
premise.
:::

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
1 ~(P\/Q), P\/R, S->Q :|-: R/\~S
```

:::{.hint .aside}
Remember that you can use D-NC!
:::

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
2 P->Q, ~(P->R) :|-: Q
```

:::{.hint .aside}
D-COMMDISJ makes 3 trivial.
:::

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
3 P\/Q->R, Q\/P :|-: R
```

:::{.hint .aside}
4 is simpler if you use D-MCA.
:::

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
4 ~P, ~Q :|-: P<->Q
```

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
5 (P/\Q)->R :|-: ~(Q->R) -> ~P
```

Remember MPT, the "Modus" rule that is only valid for *exclusive*
disjunctions? And remember how the exclusive disjunction is truth-functionally
equivalent to the negation of a biconditional? Put those two points together,
and it is clear that 6 should be valid.

:::{.hint .aside}
Use D-NB and the appropriate form of Biconditional Tollens to complete (6)
:::


```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
6  ~(P<->Q), Q :|-: P
```


The following derivation, 6, describes a pattern known as "Separation of Cases".
This is the pattern of reasoning used by Sarah in the scene from the
Labyrinth. As you may recall, she reasoned, in outline, as follows:

::: standardform
-   Either Lefty is lying or Lefty is telling the truth.
-   If Lefty is lying, then the door on the right leads to the castle.
-   If Lefty is telling the truth, then the door on the right leads to the
    castle.
-   The door on the right leads to the castle.
:::

Separation of Cases is a natural way to reason about disjunctions.
You can complete 6 here, or you can derive it in the [Rule
Builder](Rule-Builder) and save it as a derived rule.
If you do that, use your derived rule to complete (7).

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
7 P\/Q, P->R, Q->R :|-: R 
```

The next two derivations, 8 and 9, are variations on CDJ. 
You might prefer to solve these in [the rule builder](Rule-Builder) and save
them as derived rules, and then use those derived rules to complete these
exercises for points.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
8 P->Q :|-: ~P\/Q
9 P\/Q :|-: ~P->Q
```

Our disjunction in inclusive. If you want to express exclusive disjunction,
you can use the phrase "...or..., but not both", as in:

::: displayed
-   P or Q, but not both P and Q
-   (P∨Q)∧¬(P∧Q)
:::

As has been mentioned before, an exclusive disjunction is also equivalent to
the negation of a biconditional:

::: displayed
-   ¬(P↔Q)
:::

The next two derivations, 10 and 11, establish the logical equivalence of
these two representations of exclusive disjunction:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
10 ~(P<->Q) :|-: (P\/Q)/\~(P/\Q)
11 (P\/Q)/\~(P/\Q) :|-: ~(P<->Q)
```

<!-- vim: set ft=carnap :-->
