---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.12/plyr.css
js: 
-   https://cdn.plyr.io/3.6.12/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
---


::: cover
#  Translation in Sentential Logic 

[![Mathematical Symbol
Fight](https://imgs.xkcd.com/comics/mathematical_symbol_fight.png){title="Oh
no, a musician just burst in through the door confidently twirling a treble
clef." alt="A comic depicting several symbols from mathematics, arranged by
how useful they would be in a fight"}](https://xkcd.com/2343){target="_blank" rel="noopener noreferrer"}

::: epigraph
"[V]ariations of sense may be tolerated, although they are to be avoided in
the theoretical structure of a demonstrative science and ought not to occur in
a perfect language." 

[Gottlob Frege, "[On Sense and Reference](https://www.jstor.org/stable/2181485){target="_blank" rel="noopener noreferrer"}", 210, note 2.]{.source}
:::
:::

<!--_-->

## Introduction

In the last chapter, we introduced a new artificial language, the language of
Sentential Logic (SL). In this chapter, we begin to *use* this language,
by learning how to translate sentences in SL into English, and vice versa.
At first, sentences in SL can look like meaningless clusters of symbols. But
that is true of sentences in any unfamiliar language. By the end of this
chapter, you should feel comfortable *reading* these symbols as *meaningful sentences*.

Sentences in SL also look a lot like formulas from algebra. Many students
learn algebra by rote, as a system of meaningless transformations applied to
meaningless clusters of symbols. That can lead to a lot of frustration. And it
can lead to some bad habits that will interfere with what you need to do here.
For example, you might find that, when faced with symbols, your mind resists
the task of *reading* the symbols as sentences, and instead wants to start
mindlessly *calculating*, applying algebraic transformations (like
"distributing the negation"). If you notice this happening, try to stop, take
a deep breath, and re-orient your mind. We aren't doing math! These are
*sentences*, not *formulas*. Your task is not to *calculate* or *transform*,
but to *read*!

As with any unfamiliar language, learning how to translate is only the first
step toward literacy. With practice, you will be able to read sentences in SL
without having to translate them into English.

## Understanding Boxes and Circles

:::liveshapes
We continue to use the convention introduced in the previous chapter:
[]{.P} and [ ]{.Q} are placeholders for arbitrary sentences. For example, if
we want to talk about all conditionals, we can describe them as sentences that
fit the pattern,

:::{.displayed}
-   ([ ]{.P} → [ ]{.Q})
:::
:::

By typing 'P' into the box above, and 'Q' into the circle, you get the conditional:

::: example
| (P → Q)
:::

And by typing '(P ∧ Q)' into the box, and '(R ∨ S)' into the circle, you get,

:::example
| ((P ∧ Q) → (R ∨ S))
:::

And by typing 'P' into the box, and '(Q → (R → S))' into the circle, you get,

:::example
| (P → (Q → (R → S)))
:::

If you are having trouble seeing whether or not a given sentence fits a given
pattern, it can be helpful to literally draw the boxes and circles around the
parts. Unless you have a fancy device that lets you draw on your screen, this
means writing the sentence on a piece of paper, and using a pen or pencil.

Technically, our boxes and circles are variables that range over sequences of
linguistic symbols. Traditionally, such variables are represented using Greek
letters, like φ ('phi') and ψ ('psi'). So, another way to describe the pattern
of a conditional is:

:::example
| (φ → ψ)
:::

Some exercises include built in tips or error messages generated by Carnap,
where you will encounter this use of Greek letters to describe patterns.
I prefer the box and circle metaphor, which encourages us to think of these
variables as "slots" that can be "filled in" with different symbols.

## Canonical English

Translation goes both ways: from SL to English, and from English to SL.
We start by discussing translating from SL to English.
But English is very complicated, and SL is very simple.
So, for any given sentence in SL, there are many equivalent English
translations. 
To keep things manageable, we introduce the idea of a "canonical" English
translation, generated by following a precise procedure.
It is designed to map sentences of SL into English without introducing any ambiguities.
Canonical English translations are not pretty,
but they are recognizable English, 
and you should be able to understand them.

Consider the sentence,

::: example
| P ∧ ¬Q → ¬R ∨ S
:::

To translate this into canonical English, 
 first **we rewrite the sentence in official notation**:

::: example
| ((P ∧ ¬Q) → (¬R ∨ S))
:::

This ensures that all the parentheses in the sentence have been made explicit.
Canonical English translations retain *all* parentheses.

Next, we **translate the main connective** into canonical English,
 referring to the table of canonical translations for each connective.

:::{.liveshapes}
  SL                                Canonical Translation
  --------------------------------- ----------------------------------------------
  ¬[]{.P to="1"}                    it is not the case that []{.P to="1"}
  ([]{.P to="2"} → []{.Q to="2"})   (if []{.P to="2"} then []{.Q to="2"})
  ([]{.P to="3"} ∧ []{.Q to="3"})   (both []{.P to="3"} and []{.Q to="3"})
  ([]{.P to="4"} ∨ []{.Q to="4"})   (either []{.P to="4"} or []{.Q to="4"})
  ([]{.P to="5"} ↔ []{.Q to="5"})   ([]{.P to="5"} if and only if []{.Q to="5"})
:::

In this case, the main connective is '→', 
and the overall form of the sentence is '(...→...)'.
The canonical English translation for this is '(if...then...)', so:

::: {.example .liveshapes}
| ((P ∧ ¬Q) → (¬R ∨ S))
| (if [(P ∧ ¬Q)]{.P} then [(¬R ∨ S)]{.Q})
:::

Notice that we have only translated the *main* connective. When constructing
canonical translations, it is important to work methodically, one step at at time.

Now we turn our attention to the two untranslated parts:
 the antecedent, '(P ∧ ¬Q)',
 and the consequent, '(¬R ∨ S)'.
For each of these parts, we repeat the same process. That is, we replace the
main connective of that part with its canonical translation.

The main connective of the antecedent, '(P ∧ ¬Q)',
is the conjunction, '∧', so its overall form is '(...∧...)'.
The canonical English for this is '(both...and...)', so:

::: {.example .liveshapes}
| (if [(P ∧ ¬Q)]{.P} then [(¬R ∨ S)]{.Q})
| (if (both [P]{.P to=1} and [¬Q]{.Q to=1}) then ([¬R]{.P to=2} ∨ [S]{to=2}))
:::

The main connective of the consequent, '(¬R ∨ S)', is the disjunction,
'∨'. So its overall form is '(...∨...)'.
The canonical English for this is '(Either...or...)': 

::: {.example .liveshapes}
| (if (both [P]{.P to=1} and [¬Q]{.Q to=1}) then ([¬R]{.P to=2} ∨ [S]{to=2}))
| (if (both [P]{.P to=1} and [¬Q]{.Q to=1}) then (either [¬R]{.P to=2} or [S]{to=2}))
:::

This leaves us with four untranslated parts: 'P', '¬Q', '¬R', and 'S'. 'P' and
'S' are atomic, so we leave them for the moment: we always translate our atomic
sentences last. '¬Q' and '¬R' are
negations, of the form '¬...'. The canonical English for this is 'it is not
the case that ...':

::: {.example .liveshapes}
| (if (both [P]{.P to=1} and [¬Q]{.Q to=1}) then (either [¬R]{.P to=2} or [S]{to=2}))
| (if (both [P]{.P to="1"} and it is not the case that [Q]{.Q to="1"}) then
  (either it is not the case that [R]{.P to="2"} or [S]{to="2"}))
:::

At this point, each untranslated part is an atomic sentence letter. So at this
point, we have translated all of the *logical* structure of the sentence.

To translate the sentence letters, 
 we need a [scheme of abbreviation]{.vocab}, 
 that is, a mapping from sentence letters to English sentences.
For example,

::: soa
| P: Patrícia is here
| Q: Quincy is here
| R: Rajon is here
| S: Simone is here
:::

There is no one correct scheme of abbreviation. If you are not given one, it
is up to you to make one up.

Given the above scheme, we can replace each sentence letter with the corresponding
English sentence:

::: {.example .liveshapes}
| (if (both [P]{.P to="1"} and it is not the case that [Q]{.Q to="1"}) then
  (either it is not the case that [R]{.P to="2"} or [S]{to="2"}))
| (if (both [Patricia is here]{.P to="1"} and it is not the case that [Quincy
  is here]{.Q to="1"}) then (either it is not the case that [Rajon is here]{.P
  to="2"} or [Simone is here]{to="2"}))
:::

This completes our translation.

-----

We can break this down into four steps:

Step 1
:   Write the sentence in official notation, with all of its parentheses.

Step 2
:   Find the main connective, and replace it with its canonical English translation.

Step 3
:   For each untranslated part, repeat step 2, until the only remaining
    untranslated parts are atomic sentence letters.

Step 4
:   Replace those sentence letters with English sentences, in accordance with
    your scheme of abbreviation.

Each of our logical connectives has a fixed meaning.
But a sentence letter can represent any English sentence.
So the same sentence in SL can be translated into many different English
sentences, depending on our choice of a scheme of abbreviation. All of these
sentences will have the same *logical form*, but they will differ in their
*non-logical content*.

For example, here is the same sentence from SL, translated using a difference
scheme of abbreviation, so now it is about cute animals, instead of the
presence or absence of Patricia, Quincy, Rajon and Simone.

::: soa
| P: Penguins are cute
| Q: Koalas are cute
| R: Roaches are cute
| S: Squirrels are cute
:::

::: example
| (if (both P and it is not the case that Q) then (either it is not the case that R or S))
| (if (both penguins are cute and it is not the case that koalas are cute) then (either it is not the case that roaches are cute or squirrels are cute))
:::

Carnap does not know English. So it cannot tell whether or not your canonical
translation of a given sentence is correct. Still, it is important that you
practice this. You will be tempted to disregard the steps, and translate each
sentence all at once. Resist that temptation! It leads to a messy confusion.
Once you have a good feel for the process, you will of course be able to
translate from SL into English "in your head".

:::soawrapper
:::soasticky
| P: You are happy
| Q: You clap your hands
:::

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
1 Using the provided scheme of abbreviation, provide a canonical English translation of '¬(P → Q)'
```

:::{.reaction .correct ex=1}

Let's check your answer.

```{.QualitativeProblem .MultipleChoice points=10}
2 Which of the following is the correct canonical English translation?
| (if it is not the case that you are happy then it is not the case that you clap your hands)
| *it is not the case that (if you are happy then you clap your hands)
| (it is not the case that (if you are happy then you clap your hands))
| (if it is not the case that you are happy then you clap your hands)
```

:::{.reaction .incorrect ex=2 ans=0}
It seems like you tried to "distribute" the negation, a habit you are
borrowing from Algebra. **DON'T DO THIS!** Negations stay where they are.
We have not introduced any "distribution laws" for negation.
:::

:::{.reaction .incorrect ex=2 ans=2}
It looks like you added parentheses around the entire sentence. Perhaps when
rewriting it in official notation, you wrote something like this: '(¬(P →
Q))'? Remember, we have precise rules about when and where parentheses go.
Negations are not surrounded in parentheses.
:::

:::{.reaction .incorrect ex=2 ans=3}
Somehow, you moved the negation inside the conditional, so it is now part of
the antecedent. The sentence you have is a translation of '(¬P → Q)', instead
of '¬(P → Q)'.
:::

:::{.reaction .correct ex=2}

Good. Here is a step by step breakdown of the translation process:

:::example
| ¬(P → Q)
| It is not the case that (P → Q)
| It is not the case that (if P then Q)
| It is not the case that (if you are happy then you clap your hands)
:::

:::
:::

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
3 Using the provide scheme of abbreviation, provide a canonical English translation of '¬P → Q'
```

:::{.reaction .correct ex=3}
Here is the solution, step by step:

:::example
| ¬P → Q
| (¬P → Q)
| (if ¬P then Q)
| (if it is not the case that P then Q)
| (if it is not the case that you are happy then you clap your hands)
:::

Compare that to your answer, and the steps you took. Do they match? Did you
skip steps?
:::

So, we have two sentences in SL, and their corresponding English translations:

::: example
| ¬(P → Q)
| it is not the case that (if you are happy then you clap your hands)
| (¬P → Q)
| (if it is not the case that you are happy then you clap your hands)
:::

Do you see that these don't mean the same thing?
The first says that you are *not* the sort who claps when happy.
It is the negation of a conditional.
The second is a conditional with a negation as antecedent:
it says that you *are* the sort who claps when *un*-happy.
These are very different claims, with very different logical consequences.

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
4 Using the provided scheme of abbreviation, provide a canonical English translation of '(P ∧ Q) ∨ ¬P'
```

:::{.reaction .correct ex=4}
Here is a breakdown of (4):

:::example
|(P ∧ Q) ∨ ¬P
|((P ∧ Q) ∨ ¬P)
|(either (P ∧ Q) or ¬P)
|(either (both P and Q) or it is not the case that P)
|(either (both you are happy and you clap your hands) or it is not the case that you are happy)
:::

Again, compare both the final answer to your final answer, and the steps to
your steps. If you are just trying to do this all in your head, you are doing
it wrong.

:::


```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
5 Using the provided scheme of abbreviation, provide a canonical English translation of 'P ∧ (Q ∨ ¬P)'
```

:::{.reaction .correct ex=5}
Here is a breakdown of (5):

:::example
| P ∧ (Q ∨ ¬P)
| (P ∧ (Q ∨ ¬P))
| (both P and (Q ∨ ¬P))
| (both P and (either Q or ¬P))
| (both P and (either Q or  it is not the case that P))
| (both you are happy and (either you clap your hands or it is not the case that you are happy))
:::
:::

When constructing these translations, be sure, when you are done, to step back
and try to *read* the result, and think about what it means.
Then go back to the original sentence in SL, and try to *read* that sentence,
and think about what it means. One of your goals here is to learn how to read
sentences in SL.

:::

## Relaxing Canonical English

Canonical English is English squished into the shape of SL.
An idiomatic translation from SL into English should express the same thought,
 but in forms English prefers.
But this is tricky. English was not designed to keep careful track of logical
form, and what English prefers is often ambiguous.

There are a few things we can do to nudge our canonical English translations
toward more idiomatic English. Here are three:

-   use 'not' instead of 'it is not the case that' (but *only* when negating atomic
    sentences!)
-   drop parentheses (but *only* when this doesn't introduce ambiguity!)
-   drop "helper" words like 'both', 'either', and 'then' (but *only* when this doesn't
    introduce ambiguity!)

We consider each in turn.

### Negations and 'not'

In SL, negation is expressed using a *prefix* that attaches to the sentence it
negates. We mimic this in canonical English by using the phrase 'it is not the
case that'.
English prefers to express negation using 'not' as an *infix*. That is,
we place the 'not' in the middle of the sentence, next to the main verb.
(In the 90s, [Wayne's
World](https://www.imdb.com/title/tt0105793/){target="_blank" rel="noopener
noreferrer"}<!--_--> popularized a slang used of 'not' as a *postfix*, as in 
"What a totally amazing, excellent discovery — not!")

For example,

::: example
-   ¬R: It is not the case that it is raining.
-   ¬R: It is not raining. 
:::

The first is canonical English, but the second is better English, and
obviously preferred.

Unfortunately, this expressing negation as an *infix* comes with a significant
limitation: *it only works when you are negating a simple atomic sentence.*
A molecular sentence, like 'It is raining and it is snowing', does not have a
single main verb. The "main" thing in this sentence is not the first 'is' or
the second 'is', but the *main connective*, expressed by 'and'. And English
doesn't offer any way to negate a sentential connective using an infix
notation. For example, these are ungrammatical:

:::{.example .xed}
-   ¬(R ∧ S): It is raining *not and* it is snowing.
-   ¬(R → S): If it is raining *not then* it is snowing.
:::

As far as I know, there is no deeply principled reason for this. It is just a
fact about English that it doesn't work this way. (Perhaps 'nor' is an
exception: we will talk about it more later.)

Since we cannot use an infix expression of negation to handle these cases in
English, we have to instead use the prefix,
'it is not the case that':

:::example
-   ¬(R ∧ S): It is not the case that (both it is raining and it is snowing).
-   ¬(R → S): It is not the case that (if it is raining then it is snowing).
:::

Logicians, especially when speaking out loud, will often shorten this, and just use 'not' as a
prefix:
:::example
-   ¬(R ∧ S): Not (both it is raining and it is snowing).
-   ¬(R → S): Not (if it is raining then it is snowing).
:::

This tends to result in sentences that are not quite English, but can
nevertheless be easily understood.

When faced with the negation of a molecular sentence, 
you might be tempted to "distribute" the negation, so you can express it using
'not' next to the main verb of each part. For example,

:::{.example
-  ¬(T∧S): it is not the case that (both it is thundering and it is snowing)
-  ¬(T∧S): [(both it is not thundering and it is not snowing)]{.xed}
:::

These are not equivalent, and the second is not a correct translation of the
sentence in SL.

Do you see how these two translations differ in meaning?
The first is the negation of a conjunction. It says that we are not experiencing
[thundersnow](https://www.accuweather.com/en/accuweather-ready/what-is-a-thundersnow/668020){target="_blank"
rel="noopener noreferrer"}, <!--_-->
 that midwestern weather abomination that occurs when thunder and snow occur together.
The second is a conjunction of negations. It says that we are not experiencing thunder *and* we are not
experiencing snow. It is an incorrect translation of '¬(T ∧ S)'. Instead, it
translates the sentence '¬T ∧ ¬S':

:::example
-  ¬T ∧ ¬S: (both it is not thundering and it is not snowing)
:::

Again, compare each of the following, and think about how they differ in
logical form, and how this means that they differ in meaning:

::: example
-   ¬(P → Q): It is not the case that (if you are happy then you clap your hands)
-   (¬P → Q): (If you are not happy then you clap your hands)
-   (¬P → ¬Q): (If you are not happy then you don't clap your hands)
:::

The first says that you are *not* the sort to *clap when happy*.
The second, that you *are* the sort to clap when *not* happy.
And the third, that you *are* the sort *not* to clap when *not* happy.

### Parentheses and Helper Words

Canonical English retains the parentheses from SL.
Almost always, we can drop these parentheses, without
introducing ambiguity.

Here is an example:

:::example
-  (P ∧ (Q ∨ R))
-  (both P and (either Q or R))
-  both P and either Q or R
:::

When we drop the outermost parentheses, we don't introduce any ambiguity. When
we drop the inner parentheses, there is a danger of introducing ambiguity. How
will we be able to tell that the *and* is the main connective, not the *or*?

But as you can see, we are protected from this danger by the use of 'both' and
'either'. When you parse 'both P and either Q or R' in English, you are forced
to treat the *and* as the main connective.

:::{.example}
-  P ∧ (Q ∨ R)
-  both P and (either Q or R)
-  [(both P and either Q) or R]{.xed}
-  [both (P and either Q) or R]{.xed}
:::

The first parsing works: 'either Q or R' is a sentence, and it can be joined
to P, using 'both...and...'.
The second parsing doesn't work: 'both P and either Q' isn't a sentence. It
has that extra 'either' in there.
The third parsing also doesn't work: again the 'either' is stranded, and 'P
and either Q' isn't a sentence. But also, we seem to be trying to pair 'both'
with 'or', but 'both' and 'or' don't work together.
'Both' only partners with 'and', and 'or' only partners with 'either'. 

So it is the use of 'both' and 'either' that forces the first reading,
which makes the *and* the main connective. What happens if we also drop those
two helper words?

:::example
-  P ∧ (Q ∨ R)
-  both P and either Q or R
-  P and Q or R
:::

The result is ambiguous. Nothing in 'P and Q or R' tells us that the *and* is
the main connective instead of the 'or'.

So we cannot drop *both* the parentheses *and* the helper words, without
introducing ambiguity. But we can drop *either* the parentheses (while keeping
the helper words) *or* the helper words (while keeping the parentheses):

:::example
-  P ∧ (Q ∨ R)
-  both P and either Q or R
-  P and (Q or R)
:::

We have four binary connectives:
disjunction, conjunction, the conditional, and the biconditional.
In our canonical translations, all but the biconditional are translated using
a pair of separated words: 'both...and...', 'either...or...', 'if...then...'.
In each case, we can distinguish the "primary" expression of the connective,
and the "helper". The "helper" is grammatically optional, but, when present,
can help to indicate logical structure, and avoid ambiguity.

See how the 'then' is optional, and 'if' can express the conditional by
itself?

:::example
-   R → P
-   If it rains then it pours.
-   If it rains it pours.
-   [It rains it then pours]{.xed}.
:::

See how, in the last case, the 'then' no longer expresses an 'if...then...'
relationship, but instead expresses a temporal sequence of events?

Similar remarks apply to 'both...and...' and 'either...or...':

:::example
-   P ∧ Q
-   Both I am happy and I know it.
-   I am happy and I know it.
-   [Both I am happy I know it]{.xed}.
:::

See how the 'both' is optional, but the 'and' is not? 'Both' is the helper. 'And' is doing the heavy
lifting. Likewise:

:::example
-   P ∨ Q
-   Either I am happy or I know it.
-   I am happy or I know it.
-   [Either I am happy I know it]{.xed}.
:::

Our translation of the biconditional doesn't have this feature. The entire
'...if and only if...' is needed to express the biconditional. No part of it
is optional. But also, this means that in this case, there is no "helper"
available to help clarify logical form, and avoid ambiguity:

:::example
-   ¬(P ↔ Q)
-   It is not the case that (P if and only if Q)
-   It is not the case that P if and only if Q
:::

Do you see why the last sentence is ambiguous?
Does it mean '¬(P ↔ Q)', or '(¬P ↔ Q)'? So, in this case, it is best to retain
the parentheses. (Later on, we will discover that these two sentences are
*logically equivalent*, which makes this less of a problem then it might be.)

One last thing worth noting: it is often *much easier* to *see the logical
form* of an English sentence augmented by parentheses than an English sentence
that makes heavy use of helper words. Compare:

:::example
-   Both if P and Q then either R or S and T
-   (If (P and Q) then (R or S)) and T 
:::

Neither of those are easy to read. But you have to work to figure out the
structure of the first, while the structure of the second is clearly
displayed.

:::soawrapper
::: soasticky
| P: Pickles is an influencer.
| W: Diane is a writer.
| T: Bojack is an actor.
:::

For each of the following, select all the correct unambiguous translations.

```{.QualitativeProblem .MultipleSelection points=10}
6 ¬P
| *Pickles isn't an influencer
| *Pickles is not an influencer
| *It is not the case that Pickles is an influencer
```
:::{.reaction .correct ex=6}
These are all correct and unambiguous.
In the first and second, the negation is expressed by a 'not' next to the main verb.
In the third, the negation is expressed using our canonical translation, with
the prefix 'it is not the case that'.
:::

```{.QualitativeProblem .MultipleSelection points=10}
7 W ∧ P
| *Diane is a writer and Pickles is an influencer
| Either Diane is a writer and Pickles is an influencer
| *Both Diane is a writer and Pickles is an influencer
| If Diane is a writer and Pickles is an influencer
```

:::{.reaction .correct ex=7}
The first is correct and unambiguous: it drops the helper word 'both' and the
parentheses, but that doesn't introduce any ambiguities in this case.
The second is not grammatical English: 'either' cannot be used as a helper
word with 'and' to express a conjunction.
The third is correct and unambigious: it is the canonical English translation,
with outermost parentheses dropped.
The fourth is not grammatical English: 'If' cannot be used as a helper word
with 'and'.
:::

```{.QualitativeProblem .MultipleSelection points=10}
8 ¬(P → W)
| *It is not the case that if Pickles is an influencer then Diane is a writer
| If Pickles is not an influencer then Diane is not a writer
| *It is not the case that if Pickles is an influencer, Diane is a writer
```

:::{.reaction .correct ex=8}
The first is correct and unambigious: it is the canonical translation, but
with the parentheses around the conditional '(if Pickles...then Diane...)'
dropped. This is okay, because 'it is not the case that' is still forced to
negate the entire conditional, because of the placement of the 'if'.

The second is not correct: it appears as though someone has attempted to
"distribute" the negation, so that rather than negating the conditional, they
are negating both parts of the conditional. But conditionals and negations
don't work that way.

The third is also correct. It is like the first, but the helper word 'then'
has been dropped. In this case, that doesn't introduce any ambiguity.
:::


## From English to Symbols

When we translate from SL to English,
 we are translating from a simple language
 into a complex language.
When we translate from English to SL,
 we are translating from a complex language
 into a simple language.

If you are translating from our canonical English,
 you can just reverse the process:

Step 1
:   Replace the simple sentences with sentence letters.

Step 2
:   Locate the least main connectives, and replace the English expression of
    the connective with the corresponding symbol.

Step 3
:   Repeat step (2), working your way out from the least main connectives to
the main connective, until you have translated every connective into symbols.

Step 4
:   If you want, drop parentheses to write the sentence in informal notation.

:::{.example .liveshapes}
| (If (both [Pickles is an influencer]{.P to=2} and it is not the case that [Bojack is an
  actor]{.Q to=2}) then [Diane is a writer]{.R to=2})
| (If (both []{.P to=2} and it is not the case that []{.Q to=2}) then []{.R to=2})
| (If (both []{.P to=2} and ¬[]{.Q to=2}) then []{.R to=2})
| (If ([]{.P to=2} ∧ ¬[]{.Q to=2}) then []{.R to=2})
| (([]{.P to=2} ∧ ¬[]{.Q to=2}) → []{.R to=2})
:::

If you are translating from slightly relaxed canonical English,
 the process can be a bit more challenging.
You may need to work out the structure first,
 by attending to helper words:

:::example
- either both Pickles is an influencer and Diane is a writer or Bojack is an actor 
- either (both Pickles is an influencer and Diane is a writer) or Bojack is an actor 
:::

Once you've worked that out, you can proceed to translate to SL.

Here is a more challenging example,
 where two instances of the helper word 'then' have been left out:

:::example
| If if Pickles is an influencer Diane is a writer Bojack is an actor
:::

Is that even grammatical? Yes, it is. The way to read it is to realize that the helper word
'then' has been dropped in two places:

:::example
| If if Pickles is an influencer **then** Diane is a writer **then** Bojack is an actor
:::

Now you need to figure out which 'if' each 'then' is working with,
 and what that tells you about the structure:

::: example
-   <s>If (if Pickles is an influencer) then (Diane is a writer then Bojack is
    an actor)</s>
-   If (if Pickles is an influencer then Diane is a writer) then Bojack is an
    actor
:::

The first suggestion corresponds to the idea that the first 'if' is working
with the first 'then'. 
But we can rule this out, 
because it leaves the 'if' in 'if Pickles is an influencer' stranded, 
and it leaves the 'then' in 'Diane is a writer then Bojack is an actor'
stranded as well.

The second suggestion, on the other hand, gives us complete sentences,
 both for the antecedent, 'if Pickles is an influencer then Diane is a
 writer', and the consequent 'Bojack is an actor'.
So this tells us that the second suggestion is correct.

From there, our translation can proceed:

:::example
| If if Pickles is an influencer Diane is a writer Bojack is an actor
| If if Pickles is an influencer then Diane is a writer then Bojack is an actor
| If (if Pickles is an influencer then Diane is a writer) then Bojack is an actor
| If (if P then W) then T
| If (P → W) then T
| (P → W) → T
:::
:::

Conditionals inside of conditionals are often awkward.
I know that some of my colleagues doubt that they are even good English.
But if you believe that I am expert on this if I teach logic, then you should
agree that English allows conditionals inside of conditionals if you agree
with anything at all.

Here is a more intuitive example to consider:

::: soa
| P: I call
| Q: You answer
| S: I feel lonely
:::

::: example
| If (if I call then you don't answer) then I feel lonely
| (P -> ¬Q) → S
:::

------

So far, you have completed three types of exercises in Carnap: open-ended
responses, multiple choice questions, and parsing problems. A fourth type of
exercise is a translation exercise, and that's what I am going to have you do
now.

Remember, when you need to type in logic symbols, you can use these
shortcuts:

  Connective     Keyboard Shorthand
  -------------- ----------------------------------------------
  ∧              '/\' (forward slash, followed by backslash)
  ∨              '/\\' (backslash, followed by forwardslash)
  →              '-\>' (minus sign, followed by greater than)
  ↔              '<-\>' (less-than, minus, greater than)
  ¬              '\~' (tilda)

::: soawrapper
::: soasticky
| P: Parrots talk.
| Q: Quail talk.
| R: Robins talk.
:::

Translate the following sentence into SL, typing your answer into the box.
When you think you have the right answer, you need to **HIT ENTER** to check
your work. If it is correct, you then need to **CLICK SUBMIT** to submit your
work. Verify that you have successfully submitted the problem in the progress
bar.

```{.Translate .Prop points=10}
9 (P->Q) : If parrots talk then quail talk.
```

:::solution
![solution to 9](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/if_parrots_talk_then_quail_talk.mp4){.solution}
:::

All translation problems in the reading have accompanying videos,
demonstrating how they are solved.
You might be tempted to just watch the video,
 and enter the solution from the video.
But you need to first *attempt* the problem yourself,
 and only watch the video after you have made a sincere attempt.
That way,
 if you got stuck or made a mistake,
 the video can help you figure out what went wrong,
 and that will help you learn how to complete these problems on your own.
If you just use the videos as answer keys,
 without first attempting the problems for yourself,
 you will get the points on the reading assignment,
 but you will struggle to complete the exercises and the mastery check.


```{.Translate .Prop points=10}
10 (P/\Q)->R : If (both parrots talk and quail talk) then robins talk.
```

:::solution
![solution to 10](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/If_both_parrots_talk_and_quail_talk_then_robins_talk.mp4)
:::

```{.Translate .Prop points=10}
11 P/\(Q->R) : Both parrots talk and (if quail talk then robins talk).
```

:::solution
![solution to 11](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/both_parrots_talk_and_if_quail_talk_then_robins_talk.mp4)
:::

:::

## The Conditional in English

Conditional statements are 'if...then...' statements. In SL, we express these
statements using '→'. But English offers *lots* of flexible ways of expressing
conditionals. So sometimes translating conditionals from English to SL can be
confusing.

To keep track of this, it is very important that we have clear labels for the two parts of a
conditional. Remember, the [antecedent]{.vocab} is the "if" part of the
conditional, and the [consequent]{.vocab} is the "then" part, so, in this
conditional, 'it rains' is the antecedent, and 'it pours' is the consequent:

:::example
-   If [it rains]{.P} then [it pours]{.Q}
:::

The 'ante-' in 'antecedent' means "come before".
When you play poker, you ante *before* the cards are dealt.
Prior mishaps *ante*date the current mishap.
Italians eat *anti*pasto before they eat other courses. 
In SL, the antecedent always comes *before* the arrow:

:::example
-   ( it rains → it pours)
:::

The 'sequent' in 'consequent' means "to follow": the consequent is
what, according to the conditional, *follows from* the antecedent.
In SL, the consequent always comes *after the arrow.

### 'If' and 'then'

But English is flexible. In English, sometimes the consequent comes first,
followed by the antecedent:

:::example
-   If [it rains]{.P} then [it pours]{.Q}
-   [It pours]{.Q} if [it rains]{.P}
:::

These sentences *say exactly the same thing*. In each, the "if" part---the
antecedent---is 'it rains'. And the "then" part---the consequent---is 'it
pours'.

In English, the order in which the parts of a conditional
are expressed does not determine which part is which. Instead, this is
determined using "markers": the word 'if' is an antecedent marker. In both
examples above, it marks 'it rains' as the antecedent. And the helper word
'then', when present, is a consequent marker. In the first example above, it
marks 'it pours' as the consequent.


```{.QualitativeProblem .MultipleChoice points=10}
12 What is the antecedent of 'If you are happy, then you know it'?
| *you are happy
| if you are happy
| you know that you are happy
| then you know that you are happy
```

:::{.reaction .correct ex=12}
The antecedent is the 'if' part of the sentence, the part *marked* by the 'if', so 'you are happy'.
It doesn't *include* the 'if', so not 'if you are happy'.
:::

```{.QualitativeProblem .MultipleChoice points=10}
13 What is the consequent of 'If you are happy, then you know it'?
| you are happy
| if you are happy
| *you know that you are happy
| then you know that you are happy
```

:::{.reaction .correct ex=13}
The consequent is the 'then' part of the sentence, the part *marked* by the
'then', so 'you know that you are happy'.
It doesn't *include* the 'then', so not 'then you know that you are happy'.
:::

```{.QualitativeProblem .MultipleChoice points=10}
14 What is the antecdent of 'My plants die if I don't water them'?
| my plants die
| if I don't water my plants
| *I don't water my plants
```

:::{.reaction .correct ex=14}
The antecedent is the part marked by 'if'. The order in which the two
sentences occur in English doesn't tell you anything about their *logical*
order. Focus on which part is marked as what, not on what order the parts
occur in.
:::

```{.QualitativeProblem .MultipleChoice points=10}
15 What is the consequent of 'My plants die if I don't water them'?
| *my plants die
| if I don't water my plants
| I don't water my plants
```

:::{.reaction .correct ex=15}
The antecedent is the part marked by 'if', which is 'I don't water my
plants'. 
The other part, 'my plants die', is unmarked.
So it must be the consequent.
:::

:::soawrapper
:::soasticky
| P: It pours.
| R: It rains.
:::

```{.Translate .Prop points=10}
16 P->R: If it pours, it rains.
```

:::solution
![solution to 16](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/if_it_pours.mp4)
:::

```{.Translate .Prop points=10}
17 R->P: If it rains, it pours. 
```
:::solution
![solution to 17](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/if_it_rains.mp4)
:::

```{.Translate .Prop points=10}
18 R->P: It pours if it rains. 
```
:::solution
![solution to 18](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/it_pours_if.mp4)
:::

```{.Translate .Prop points=10}
19 P->R: It rains if it pours. 
```
:::solution
![solution to 19](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/it_rains_if.mp4)
:::

:::

Note that 'then' cannot work as a consequent marker by itself:

::: example
| If it rains then it pours.
| <s>It rains then it pours.</s>
:::

The first sentence is a conditional. 'Then' works as a helper word with 'if',
and 'if' marks the antecedent and 'then' marks the consequent.
The second sentence doesn't express a conditional at all. Instead, 'then'
occurs with a completely different meaning, indicating the temporal order in
which the two events occurred.

### 'Only if'

Another connective we have in English is the phrase 'only if'.

:::soawrapper
:::soasticky
| P: I will eat the pizza.
| Q: The pizza has anchovies.
:::

:::example
-  [I will eat the pizza]{.P} only if [it has anchovies]{.Q}.
:::

This expresses a conditional. But which part is the antecedent, and which the
consequent?

To work this out, consider the contrast between:

::: example
-   I will eat the pizza **if** it has anchovies.
-   I will eat the pizza **only if** it has anchovies.
:::

To tease these two sentences apart, let's consider a few different situations.

Situation 1
: I am presented with a pizza that has pineapple and anchovies.

According to the first claim, I will eat the pizza if it has anchovies. Since
this pizza does have anchovies, it follows that I will eat it.

According to the second claim, I will eat the pizza only if it has anchovies.
This pizza does have anchovies, but it also has pineapple. I might not eat it:
maybe I really don't like pineapple on pizza.

Situation 2
:   I am presented with a pepperoni pizza, with no anchovies.

According to the first claim, I will eat the pizza if it has anchovies. That
doesn't mean that I won't eat this pizza. Maybe will also eat the pizza if it
has pepperoni?

According to the second claim, I will eat the pizza only if it has anchovies.
This pizza doesn't have anchovies. So it follows that I won't eat it.

What is the moral of these reflections? The moral is this: 'if', by itself, is
an antecedent marker; 'only if' is a consequent marker:

::: example
-   Q → P: I will eat the pizza **if** it has anchovies.
-   P → Q: I will eat the pizza **only if** it has anchovies.
:::

Another way to see this is to think about the relationship between these two
sentences:

::: example
-   P → Q: If I will eat the pizza then it has anchovies.
-   P → Q: I will eat the pizza only if it has anchovies.
:::

The first claim is a bit awkward. But it says that, if I eat the pizza, it
must have anchovies on it. And the second claim, with the 'only if', says the
same thing: I will eat the pizza only if it has anchovies. These are two
different ways of expressing the same conditional.

Here is another example:

:::example
-   I can legally serve you alcohol only if you are over 21.
:::

Can you see that this is equivalent to:

:::example
-   If I can legally serve you alcohol then you are over 21.
:::

In the previous section, you learned that 'if' is an antecedent marker.
But now you know that 'only if' is a consequent marker.
You might think of 'only' as an 'if' corrupter:
 it takes an 'if', and gets it to do the opposite of what it usually does.
Or you think of 'only if' as the "bizzaro twin" of 'if': 
  'only if' is to 'if' as [Bizarro](https://en.wikipedia.org/wiki/Bizarro){target="_blank" rel="noopener noreferrer"} is to
Superman. <!--_-->

:::illustration
!['Only if' as bizarro 'if'](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/bizarro.png)
:::

However you decide to think of it, the important points are these:

IF
:   'if' is an antecedent marker. The clause it introduces is the antecedent
    of a conditional. Also, 'if' can do this work alone, or it can work
    together with 'then', which marks the consequent.

THEN
:   'then' is a consequent marker. The clause it introduces is the consequent
    of a conditional. 'Then' can *only* do this work together with an 'if'.
    When 'then' is used alone, it indicated the temporal order of events,
    rather than the logical order of antecedent and consequent.

ONLY IF
:   'only if' is a consequent marker. The clause it introduces is the
    consequent of a conditional. 'Only if' can *only* do this work alone. It
    cannot be paired with an 'if' that marks the antecedent.

Putting all of this together, we get several structures in English, that can
all be used to express the same conditional:

::: example
| P → Q
| If P, then Q (the canonical translation)
| If P, Q (canonical translation, dropping the helper word 'then')
| Q if P
| P only if Q
| Only if Q, P
:::

Or, less abstractly:

:::example
-   If I eat the pizza, then it has anchovies.
-   If I eat the pizza, it has anchovies.
-   The pizza has anchovies if I eat it.
-   I eat the pizza only if it has anchovies.
-   Only if it has anchovies do I eat the pizza.
:::

(Note the grammatical anomaly in that last example,
 where we invert the subject-verb order in the second clause,
 so 'I like pizza' becomes 'do I like pizza'.)

The point is that English is very flexible, and offers us lots of ways to
express the same conditional. But there are some limits. 

We have already noted
that 'then' cannot work as a consequent marker alone: it always has to work
together with an 'if'. And when an 'if' and 'then' are working together, the
'if' has to come *first*, before the 'then':

::: example
| P → Q
| If I eat the pizza then the pizza has anchovies. 
| <s>Then the pizza has anchovies if I eat the pizza.</s>
:::

That second example doesn't work: it reads as a fragment of some larger
sentence, rather than the complete expression of a conditional. The 'then'
needs an 'if'. But the only available 'if' comes after it, not before,
and the grammar doesn't let it work as a helper with an 'if' that comes after.
:::

Here are a few more examples for you to work through, to help fix ideas.

:::soawrapper
::: soasticky
| P: You can legally drive.
| Q: You are older than eleven.
:::


```{.Translate .Prop points=10}
20 P->Q : If you can legally drive, you are older than eleven.
```

:::solution
![solution to 20](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/if_you_can_drive.mp4)
:::

```{.Translate .Prop points=10}
21 P->Q : You can legally drive only if you are older than eleven.
```
:::solution
![solution to 21](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/you_can_drive_only_if.mp4)
:::

```{.Translate .Prop points=10}
22 Q->P : You can legally drive if you are older than eleven.
```

:::solution
![solution to 22](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/you_can_drive_if.mp4)
:::

```{.Translate .Prop points=10}
23 P->Q : Only if you are older than eleven can you legally drive.
```

:::solution
![solution to 23](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/only_if_you_are_older.mp4)
:::

:::

## 'If', 'Only if', and 'If and only if'

Putting together what we have just learned about 'if' and 'only if',
 and what we learned earlier about the biconditional, we can consider the
 following three sentences side by side:

:::example
| P → Q: P only if Q
| Q → P: P if Q
| P ↔ Q: P if and only if Q
:::

The biconditional expresses a conditional relationship that goes in both
directions: from left to right, and from right to left. So, in this case, P ↔
Q expresses a conditional relation that goes from P to Q: P → Q; and a conditional
relation that goes from Q to P: Q → P. So this means that our biconditional is
equivalent to a *conjunction* of conditionals:

:::example
| P → Q: P only if Q
| Q → P: P if Q
| (Q → P) ∧ (P → Q): (P if Q) and (P only if Q)
| P ↔ Q: P if and only if Q
:::

Do you see how the English phrase 'if and only if' is composed of 'if', 'and',
and 'only if', and how those three connectives together allow us to express
the conjunction of both conditionals?

This is the place to flag a common mistake students make, which is to confuse
the English phrase 'only if' with the English phrase 'if and only if'.
Sometimes, this leads to thinking something is a conditional when it is really
a biconditional, and sometimes, it leads to the opposite mistake. You can
avoid this mistake by paying attention to all three parts of the phrase 'if
and only if', and remembering that the 'if' part is expressing a conditional
in one direction, while the 'only if' is expressing the conditional in the
other direction, and the biconditional is expressing both at the same time.

:::soawrapper

:::soasticky
| P: People talk
| R: Rumors spread
:::

```{.Translate .Prop points=10}
24 R->P : People talk if rumors spread
```

:::solution
![solution to 24](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/people_talk_if.mp4)
:::

```{.Translate .Prop points=10}
25 P->R : People talk only if rumors spread
```
:::solution
![solution to 25](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/people_talk_only_if.mp4)
:::

```{.Translate .Prop points=10}
26 P<->R : People talk if and only if rumors spread
```
:::solution
![solution to 26](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/people_talk_iff.mp4)
:::

:::

## Negation

There are two important things to say about negation. The first has already
come up:

NOT
:   The preferred way of expressing negation in English, when possible, is by putting a 'not'
    next to the verb, rather than using a wordy prefix like 'it is not the
    case that'.

The first example is stilted; the second is idiomatic:

::: example
| It is not the case that Normal is a big city,
| Normal is not a big city.
:::

And we've noted that this is not always possible: it only works for simple
sentences. If we want to negate a conjunction, conditional, disjunction, or
biconditional, we need to use the prefix, 'it is not the case that':

::: example
| It is not the case that (both Chicago is a big city and Normal is a big city)
| It is not the case that (either Chicago is a big city or Normal is a big city)
| It is not the case that (if Chicago is a big city then Normal is a big city)
| It is not the case that (Chicago is a big city if and only if Normal is a big city)
:::

You may be tempted, in these cases, to try to "distribute the negation", in
order to get a simpler, more idiomatic English expression. But that doesn't
work: when you "distribute" the negations---that is, apply them only to the
simple sentences, rather than the whole---you get sentences with different
logical forms, that have different meanings.

For example, the first of these two sentences is true, while the second is
false:

::: example
-   It is not the case that (both Chicago is a big city and Normal is a big
    city)
-   Both Chicago is not a big city and Normal is not a big city
:::

This brings us to another important feature of 'not' in English:

THE LOCALITY OF NOT
:   'Not' negates the smallest sentence that it is a part of.

For example, in the following sentence, the first 'not' negates 'Chicago is a
big city', and the second 'not' negates 'Normal is a big city':

:::example
-   Both Chicago is not a big city and Normal is not a big city
:::

The negations cannot "leak out" and spread their negativity to other parts of
the sentence. And they cannot "leap out" and negate the whole sentence. This
is because 'not', in English, stays local.

This is why we have to work hard when we want to negate the whole sentence, or
a large chunk of a sentence. For example:

::: example
-   It is not the case that both Chicago is a big city and Normal is a big
    city
:::

That 'not' wants to stay local. But the smallest sentence that it is a part of
is the whole sentence. Notice that 'It is not the case that both Chicago is a
big city' isn't a sentence. It has that helper word, 'both', in the middle,
seeking an 'and' to help. So it expresses an incomplete thought.

:::soawrapper
::: soasticky
| P: Your friends dance.
| Q: You want to dance.
| R: You can dance.
| S: It is safe to dance.
:::


```{.Translate .Prop points=10}
27 ~R/\~S : You can't dance and it is not safe to dance.
```

:::solution
![solution to 27](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/you_cant_dance_and.mp4)
:::

```{.Translate .Prop points=10}
28 ~P->~R : If your friends don't dance, you can't dance.
```

:::solution
![solution to 28](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/if_your_friends_dont_dance.mp4)
:::


```{.Translate .Prop points=10}
29 ~(~P->~R) : It is not the case that if your friends don't dance, you can't dance.
```

:::solution
![solution to 29](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/not_if_your_friends_dont_dance.mp4)
:::

:::

## 'Neither nor'

Consider the sentence,

::: example
-   Neither Bloomington is a big city nor Normal is a big city.
:::

Naively, this looks like a disjunction with both disjuncts negated:

:::example
-   Either Bloomington is not a big city or Normal is not a big city.
:::

But notice that these two sentences don't say the same thing. The first says
that *neither* city is big; the second says that one or the other isn't big.


:::soawrapper
:::soasticky
| P: Bloomington is a big city.
| Q: Normal is a big city.
:::

So this is wrong:

::: example
| Neither Bloomington is a big city nor Normal is a big city.
| <s>¬P ∨ ¬Q</s>
:::

So what does 'neither...nor...' mean? When we say that neither Bloomington nor
Normal is a big city, we mean that *both* are *not* big:

::: example
| Neither Bloomington is a big city nor Normal is a big city.
| Both Bloomington is not a big city and Normal is not a big city.
| ¬P ∧ ¬Q
:::

Do you see how the two English sentences say the same thing, and how the
sentence in SL captures this?

Or, here is another way of thinking about it. When we say that neither is a
big city, we mean that it is not the case that *either* one is big:

::: example
-   Neither Bloomington is a big city nor Normal is a big city.
-   It is not the case that (either Bloomington is a big city or Normal is a
    big city)
-   ¬(P ∨ Q)
:::

It turns out that those two sentences in SL are logically equivalent: 
 they are two different ways of saying the same thing.
So both of these translations of 'neither...nor...' are equally good.

:::

So, here is the pattern from translating 'neither...nor...':

::: example
-   Neither P nor Q.
-   ¬P ∧ ¬Q
-   ¬(P ∨ Q)
:::

::: soawrapper
::: soasticky
| P: Your friends dance.
| Q: You want to dance.
| R: You can dance.
| S: It is safe to dance.
:::


```{.Translate .Prop points=10}
30 ~(Q\/R): Neither do you want to dance nor can you dance.
```

:::solution
![solution to 30](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/neither_do_you_want_to_dance.mp4)
:::

:::

## Stylistic Variants

We have one more thing to consider in this chapter.
We talked earlier about lexical ambiguity: when one word, like 'will', has
more than one possible meaning.
The flip-side of lexical ambiguity is lexical redundancy: when several words
all have the same meaning.
English has a lot of lexical redundancy.
For example, 'shirt', 'top', and 'blouse' all mean essentially the same thing.
The same is true when it comes to connectives:
 English has many words and phrases that mean the same thing as 'if',
 many that mean the same thing as 'and',
 and some that mean the same thing as 'or' or 'if and only if'.
We call these "[stylistic variants]{.vocab}".

Here is a partial list of stylistic variants of 'if':

Stylisic Variants of 'if'
:   'provided that', 'assuming that', 'given that', 'on the condition that'...

Pretty much anywhere you can use an 'if', you can use one of these variants
instead:

::: example
- If I am high, I can fly.
- Provided that I am high, I can fly.
- Assuming that I am high, I can fly.
- Given that I am high, I can fly.
- On the condition that I am high, I can fly.
:::

And, again:

::: example
- I can fly if I am high.
- I can fly provided that I am high.
- I can fly assuming that I am high.
- I can fly given that I am high.
- I can fly on the condition that I am high.
:::

This also works with 'only if':

::: example 
- I am high only if I can fly
- I am high only provided that I can fly
- I am high only assuming that I can fly
- I am high only given that I can fly.
- I am high only on the condition that I can fly
:::

The only hitch is that these variants are less likely to take well to help for
'then'. Are these grammatical?

::: example
- Provided that I am high, then I can fly (???)
- Assuming that I can fly, then I can fly (???)
- On the condition that I can fly, then I can fly (???)
- Given that I can fly, then I can fly (???)
:::

Maybe? To my ear, they are at least awkward, and at worst ungrammatical.

:::soawrapper
::: soasticky
| P: I laugh.
| Q: I smile.
:::


```{.Translate .Prop points=10}
31 Q->P : I laugh provided that I smile.
```

:::solution
![solution to 31](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/I_laugh_provided_that.mp4)
:::

```{.Translate .Prop points=10}
32 P->Q : I laugh only on the condition that I smile.
```

:::solution
![solution to 32](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/I_laugh_only_if.mp4)
:::

:::

Here is a partial list of stylistic variants of 'and':

Stylistic Variants of 'and'
:   'but', 'however', 'although', 'even though' 

You might balk at the claim that 'and' and 'but' mean the same thing! But
consider:

::: example
- We lost and we had a good time
- We lost but we had a good time 
:::

Each of these entails that we lost, and each of these entails that we had a
good time. If there is a difference in meaning, it is roughly this: we use
'but' to express *surprising* or *unexpected* conjunctions. Since it is a bit
surprising that we had a good time, even though we lost, it is appropriate to
use 'but' in this case.

Consider these two examples:

:::example
| I broke my leg but it didn't hurt.
| I broke my leg but it hurt.
:::

The first seems fine; the second seems weird: of course it hurt!
It is weird to use 'but' when the conjunction is obvious or expected.

Does the mean that 'but' and 'and' differ in meaning? Maybe!
Or it might be that they have the same meaning,
 but different rules for when they are appropriate to use.
In any case, for our purposes, we will treat 'but' as a stylistic variant of
'and', and another way of expressing a conjunction.
Similar comments apply to the other stylistic variants of 'and', like
'however' and 'even though', which also suggest an unexpected or suprising
conjunction.

:::aside
It is hard to find examples of words that obviously have the same meanings,
 but different rules for when they are appropriate to use. 
Perhaps vulgar words are like this: 'shit' and 'feces' mean the same thing,
 but 'shit' is vulgar, and so inappropriate to use in polite company.
:::


Stylistic Variants of 'or'
:   'unless'

Consider:

::: example
-   It will rain on us unless we reach shelter before the storm hits.
-   Either it will rain on us or we reach shelter before the storm hits.
:::

Do you see that these mean the same thing? Both serve to divide the
possibilities into two. Both express the same disjunction:

::: example
-   R ∨ S
:::

The idea that 'unless' means the same thing as 'or' bothers many people.
Here is another example:

::: example
-   You will die unless you take the antidote.
:::

If this is correct, then there are only two options for you: either take the
antidote or die! So this is again a disjunction.

You may have the strong intuition that 'unless' expresses a negative
conditional, rather than a disjunction:

::: example
| If you don't take the antidote, then you will die.
:::

If you have this strong intuition, you aren't wrong. But this negative
conditional---or, rather, this conditional with negation as antecedent---is
*logically equivalent* to the much simpler disjunction,

::: example
| Either you will die or you take the antidote.
:::

We will have a chance to explore this equivalence later.
But when translating, notice that translating 'unless' as 'or' is much easier
and less error prone than translating it as a conditional with negation as
antecedent, which opens you up to more possible ways of going wrong,
by getting the conditional backwards or putting the negation in the wrong
place.

Stylistic Variants of 'if and only if'
:    'just in case', 'exactly on the condition that', 'iff'

The canonical translation of the biconditional is 'if and only if'.
This is not a familiar phrase in ordinary English, 
 but it is common in Math, the Law, and other disciplines that make heavy use
 of proofs and arguments.
The stylistic variants of 'if and only if' equally unfamiliar phrases,
 drawn from the same disciplines.

Each of these sentences says the same thing:

::: example
- Fletch is authentically happy if and only if he is getting a belly rub.
- Fletch is authentically happy **exactly on the condition that** he is getting a belly rub.
- Fletch is authentically happy **just in case** he is getting a belly rub.
:::

Notice that 'on the condition that' and 'in case' are more stylistic variants
of 'if'. So we can also say:

::: example
- Fletch is authentically happy if and only if he is getting a belly rub.
- Fletch is authentically happy **exactly if** he is getting a belly rub.
- Fletch is authentically happy **just if** he is getting a belly rub.
:::

But this brings out an interesting and subtle question: how do 'just if' and
'exactly if' differ in meaning from 'only if'?

On way to explain this is in terms of the distinction between [necessary
conditions]{.vocab} and [sufficient conditions]{.vocab}. Consider again this
trio of claims:

::: example
- Fletch is authentically happy if he is getting a belly rub.
- Fletch is authentically happy only if he is getting a belly rub.
- Fletch is authentically happy if and only if he is getting a belly rub.
:::

The first, with 'if', says that getting a belly rub is a [sufficient condition]{.vocab}
for Fletch's authentic happiness. Belly rubs are *enough* to make him happy.

The second, with 'only if', says that getting a belly rub is a [necessary condition]{.vocab} for his authentic happiness:
belly rubs are *needed* to make him happy.

The third says both together: getting a belly rub is a [necessary and
sufficient condition]{.vocab} for his authentic happiness: belly rubs are both
needed to, and enough to, make him happy.

Now suppose we ask: under what conditions is Fletch happy? And suppose we know
that belly rubs are necessary and sufficient for his happiness. Then we can
say: *exactly* those circumstances in which he receives belly rubs. Do you see
how 'exactly' here means something stronger than 'only'? 'Only' gets us a
necessary condition; 'exactly' gets us a necessary and sufficient condition.

That's the use of 'exactly' in 'exactly on the condition that', a phrase
widely used by mathematicians when they are expressing necessary and
sufficient conditions, e.g.,

:::example
-   A polygon is a square exactly on the condition that it has four equal
    sides, and four equal interior angles.
:::

Again, contrast this with the weaker claim,

:::example
-   A polygon is a square only on the condition that it has four equal
    sides.
:::

That is true, but it only gives us a necessary condition for being a square,
not a necessary and sufficient condition.

I have focused here on 'exactly'. But the same comments apply to the use of
'just' in 'just in case'. If a mathematician throws a party, and invites "just
her friends", she means that a necessary *and sufficient* condition for being
invited is being her friend. If you weren't invited, you must not be her
friend. But if she throws a party and invites "only her friends", she only means
that a necessary condition of being invited is being her friend. If you
weren't invited, that doesn't mean you aren't her friend.

Finally, you should be aware that mathematicians and philosophers often
abbreviate 'if and only if' as 'iff'. That isn't a typo: it is 'if', but with
an extra 'f'. So they will also write things like this,

::: example
| Fletch is authentically happy iff he is getting a belly rub.
:::

This is especially common when offering definitions. For example, recall our
definition of validity:

Validity
:   An argument is valid iff it is impossible for all of its premises to be
    true but its conclusion false.

Note the use of 'if and only if': this definition involves a biconditional.
(Also note the use of 'but', as a stylistic variant of 'and'.)

:::soawrapper
::: soasticky
| P: I smile.
| Q: I laugh.
| R: I react.
:::


``` {.Translate .Prop points=10}
33 P/\~Q : I smile but I don't laugh. 
```

:::solution
![solution to 33](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/I_smile_but.mp4)
:::

``` {.Translate .Prop points=10}
34 ~R\/P : I don't react unless I smile.
```

:::solution
![solution to 34](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/I_dont_react_unless.mp4)
:::

``` {.Translate .Prop points=10}
35 P<->Q : I smile just in case I laugh.
```

:::solution
![solution to 35](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/I_smile_just_in_case.mp4)
:::

``` {.Translate .Prop points=10}
36 ~P∧R : Although I don't smile, I do react.
```

:::solution
![solution to 36](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/although_I_dont_smile.mp4)
:::


:::







<!-- vim: set ft=carnap :-->
