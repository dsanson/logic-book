---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.12/plyr.css
js: 
-   https://cdn.plyr.io/3.6.12/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
---

::: cover

# Derivations in PL with Relations and Identity

:::

In this unit, we extend our system of derivation to handle multi-place
predicates, including the relation of identity. The specific learning
objectives for this unit are:

a.  I can complete derivations involving multi-place predicates and
    overlapping quantifiers
b.  I can complete derivations involving identity

## What Needs to Be Added?

Since we last considered derivations, our language has been extended in two
ways: we added multi-place predicates, and we added the speical two-place
predicate, identity.

Accomodating multi-place predicates requires no new additions to our system of
derivation. Our existing rules and methods---UI, EG, QN, UD, and ED---will
suffice. But although the system remains the same, the derivations within the
system become significantly more difficult.

To capture the logic of identity, we add three new rules, each reflecting an
important "law" of identity.

## Derivations with Multi-Place Predicates

:::wrapper
:::soasticky
| F(x,y): x is y's friend
| G(x,y): x rats on y
:::

Consider the argument:

::: standardform
1.  Nobody rats on their friend
2.  Everyone is their own friend
3.  Nobody rats on themself
:::

Before we get into the formal weeds, take a moment to think about this
argument, and convince yourself that it is valid.

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
1 Provide an informal explanation of why this argument is valid.
```

:::{.reaction .correct ex=1}
Obviously there are many reasonable things that can be said here. The point of the question is just to get you thinking and articulating your own thoughts. Below are two quasi-formal explanations. The first follows the form of a universal derivation. The second, the form of an indirect derivation. 

Premise (1) says that nobody rats on their friend. So if someone is someone's friend, they don't rat on them. Premise (2) says that everyone is their own friend. So consider any random person. By (2), they are their own friend, and by (1), they don't rat on any of their friends. So, they don't rat on themselves. But that reasoning applies to any random person, no matter who they are. So it applies to everyone. So it is true of everyone that they don't rat on themself. That is, nobody rats on themself.

Here is another way to think about it. Suppose that, contrary to the conclusion, someone *does* rat on themself. Since, according to premise (1), nobody rats on their friend, that means they are not their own friend. But this contradicts premise (2). So our assumption leads to a contradiction, which means it is false. So it is not the case that someone rats on themself. That is, nobody rats on themself.
:::

Now let's translate the premises and conclusion into PL. Technically, given
the use of 'nobody' and 'everyone', we should translate these as
generalizations restricted to persons. But for the sake of simplicity, let's
ignore that complication here.

``` {.Translate .FOL points="10"}
2 AxAy(F(x,y)->~G(x,y)), ~ExEy(F(x,y)/\G(x,y)) : Nobody rats on their friend.
```

:::{.spoiler}
We can translate 'nobody' either as a universal generalization or as the negation of an existential generalization.

As a universal generalization, it says that everyone *doesn't* rat on their friend. That is, 

:::transl
| ∀x(x doesn't rat on their friend)
| ∀x(if anyone is x's friend, then x doesn't rat on them)
| ∀x∀y(if y is x's friend, then x doesn't rat on y)
| ∀x∀y(F(x,y) -> ¬G(x,y))
:::

As the negation of an existential generalization, it say that *it is not the
case that* someone rats on their friend. That is,

:::transl
| ¬∃x(x rats on their friend)
| ¬∃x(someone is x's friend and x rats on them)
| ¬∃x∃y(y is x's friend and x rats on y)
| ¬∃x∃y(F(x,y) ∧ G(x,y))
:::

:::



``` {.Translate .FOL points="10"}
3 AxF(x,x) : Everyone is their own friend.
```

:::spoiler
:::transl
| ∀x(x is their own friend)
| ∀x(x is friends with x)
| ∀xF(x,x)
:::
:::

``` {.Translate .FOL points="10"}
4 ~ExG(x,x), Ax~G(x,x) : Nobody rats on themself.
```

:::spoiler
Again, we can treat this as a universal generalization or as the negation of
an existential generalization. As a universal generalization, it means that everyone *doesn't* rat on themself:

:::transl
| ∀x(x doesn't rat on x)
| ∀x¬G(x,x)
:::

Alternatively,

:::transl
| ¬∃x(x rats on x)
| ¬∃xG(x,x)
:::
:::

So here is one translation of the argument into PL:

:::standardform
1.  ∀x∀y(F(x,y)->~G(x,y))
2.  ∀xF(x,x)
3.  ¬∃xG(x,x)
:::

Now lets consider how we might construct a derivation. There are two big
picture strategies we can take. One idea is to take advantage of the fact that
our show line is equivalent, by QN, to a universal derivation. This means that
we can use UD, and then QN, to complete the derivation. Here is what that
looks like, in outline:

```
1. Show ~ExG(x,x)
2.   Show Ax~G(x,x)
3.     ⋮
4.   :UD
5.   ~ExG(x,x) :QN 2
6. :DD 5
```

Another idea is to make an assumption for ID. That yields an existential
generalization, so then we'll have to do an ED:

```
1. Show ~ExG(x,x)
2.   ExG(x,x) :AS
3.   Show ?
4.     G(a,a) :AS
5.     ⋮
6.     ?
7.   :ED
8.   ⋮
9. :ID
```

I find the first strategy much easier to implement, so that's what I
recommend. But either strategy will work.

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" points=10}
5 AxAy(F(x,y)->~G(x,y)), AxF(x,x) :|-: ~ExG(x,x)
```

:::spoiler
:::solution
:::youtube
<https://youtu.be/azTF_rxtojc>
:::
:::
:::

:::

## Rules for Identity 

To handle identity, we introduce three new rules. The first, which comes in
two forms, is based on an important law of identity, known as Leibniz's Law.
The other two rules are based on two important facts about the identity
relation: that it is symmetric and it is reflexive.

### Leibniz's Law

Here is the scene from the movie *Fight Club* where (**SPOILER ALERT!**) the
Narrator ("Jack", played by Edward Norton), realizes that he *is* Tyler Durden
(played by Brad Pitt):


:::solution
::: youtube
<https://youtu.be/WKVxKrrbz1E>
:::
:::

The central drama of the scene involves a logical inference: *since* Jack 
= Tyler Durden, *it follows* that all the horrible things *Tyler* did were
horrible things that *Jack* did:

:::standardform
-   Tyler did horrible things.
-   Jack = Tyler
-   Jack did horrible things.
:::

Or, in PL:

:::standardform
-   H(a)
-   a=b
-   H(b)
:::

Drama built around this form of inference is also a staple of superhero
narratives. When Spiderman is unmasked, Mary Jane discovers that Spiderman =
Peter Parker. So she realizes that when she kissed Spiderman, she kissed
Peter:

:::standardform
-   Mary Jane kissed Spiderman
-   Spiderman = Peter Parker
-   Mary Jane kissed Peter Parker
:::

Or, in PL:

:::standardform
-   K(a,b)
-   b=c
-   K(a,c)
:::

In the 1980 version of Superman, Lois discovers that Clark is Superman when he
stumbles into a fire pit:

:::solution
::: youtube
<https://youtu.be/rMH3omIA15k>
:::
:::

Lois covers it well, but perhaps the dramatic tension here lies not just in
her discovery that, since Clark = Superman, it follows that every time
*Superman* saved her, *Clark* saved her, but also in her discovery that every
time *Clark* gaslit her, *Superman* gaslit her too:

:::standardform
-   Lois was gaslit by Clark Kent
-   Superman = Clark Kent
-   Lois was gaslit by Superman
:::

Or consider what happens when Miley Stewart's secret identity
is revealed to her best friend, Lily:

:::solution
::: youtube
<https://youtu.be/DARByjEn9rI>
:::
:::

Why the shock on Lily's face? A flood of logical inferences, triggered by
revelation that Miley = Hannah. Before this scene, Lily had two separate
mental file folders, one containing facts about Miley, the other containing
facts about Hannah. But in this scene, we watch as those two folders are
merged into one: since Miley = Hannah, facts about Miley *are* facts about
Hannah, and vice versa.

This principle is known as [Leibniz's Law]{.vocab}:

Leibniz's Law
:   If α=β, then everything true of α is also true of β.

(Here I am using the Greek letters, 'α' (alpha) and 'β' (beta), to stand in
for any *terms*---that is, any name letters or variables.) It is also known as
the [Indiscernability of Identicals]{.vocab}. 

::: {.sep-inset }

![Photo of Gottfried Wilhelm Leibniz](https://dsanson.github.io/logic-materials/img/leibniz.jpg)

:::sep-header
![](https://plato.stanford.edu/symbols/sep-man-red.png) Stanford Encyclopedia of Philosophy
:::

# [Gottfried Wilhem Leibniz](https://plato.stanford.edu/entries/leibniz/){.attribution target="_blank" rel="noopener noreferrer"}

::: {#preamble}
Gottfried Wilhelm Leibniz (1646\--1716) was one of the great thinkers of
the seventeenth and eighteenth centuries and is known as the last
\"universal genius\". He made deep and important contributions to the
fields of metaphysics, epistemology, logic, philosophy of religion, as
well as mathematics, physics, geology, jurisprudence, and history. Even
the eighteenth-century French atheist and materialist Denis Diderot,
whose views were very often at odds with those of Leibniz, could not
help being awed by his achievement, writing in his entry on Leibniz in
the *Encyclopedia*, \"Perhaps never has a man read as much, studied as
much, meditated more, and written more than Leibniz\... What he has
composed on the world, God, nature, and the soul is of the most sublime
eloquence. If his ideas had been expressed with the flair of Plato, the
philosopher of Leipzig would cede nothing to the philosopher of Athens\"
(*Oeuvres complètes*, vol. 7, p. 709). Indeed, Diderot was almost moved
to despair in this piece: \"When one compares the talents one has with
those of a Leibniz, one is tempted to throw away one\'s books and go die
quietly in the dark of some forgotten corner\" (*Oeuvres complètes*,
vol. 7, p. 678). More than a century later, Gottlob Frege, who
fortunately did not cast his books away in despair, expressed similar
admiration, declaring that \"in his writings, Leibniz threw out such a
profusion of seeds of ideas that in this respect he is virtually in a
class of his own\" (\"Boole\'s logical Calculus and the Concept-script\"
in *Posthumous Writings*, p. 9). The aim of this entry is primarily to
introduce Leibniz\'s life and summarize and explicate his views in the
realms of metaphysics, epistemology, and philosophical theology.
:::
:::

There are two sorts of inference one can make based on Leibniz's Law. All of
our examples so far have followed this pattern:

::: {.standardform}
| [...α...]{.premise .nn}
| [α=β]{.premise .nn}
| [...β...]{.conclusion}
:::

That is, our first premise is some claim about α. Our second premise states
that α is identical to β. And our conclusion is obtained from the first
premise, replacing some or all occurrences of 'α' with 'β'.

For example:

::: standardform
-   Tyler blew up my apartment building
-   I = Tyler
-   I blew up my apartment building
:::

:::wrapper
::: soasticky
| F(x,y): x blew up y's apartment building
| a: Tyler
| b: me
:::

::: standardform
-   F(a,b)
-   a=b
-   F(a,a)
:::
:::

Our first premise is a claim about Tyler. Our second premise says that I am
identical to Tyler. Our conclusion is our first premise, but replacing 'Tyler'
with 'me'.

Or, again,

::: standardform
-   Miley Stewart is my best friend
-   Miley Stewart = Hannah Montana
-   Hannah Montana is my best friend
:::

:::wrapper
::: soasticky
| F(x,y): x is y's best friend
| a: Miley Stewart
| b: Hannah Montana
| c: me
:::

::: standardform
-  F(a,c)
-  a=b
-  F(b,c)
:::
:::

Our first premise is a claim about Miley. Our second premise says that Miley
is identical to Hannah. Our conclusion is our first premise, but replacing
'Miley' with 'Hannah'.

Here is more complicated example:

::: {.standardform}
-   Superman wears a cape and he wears underpants over tights
-   Superman = Clark Kent
-   Clark Kent wears a cape, and he wears underpants over tights
:::

:::wrapper
:::soasticky
| F(x,y): x wears y
| G(x,y,z): x wears y over z
| H(x): x is a cape
| I(x): x is underpants
| J(x): x is a pair of tights
| a: Superman
| b: Clark Kent
:::


::: {.standardform}
-  ∃x(H(x)∧F(a,x))∧∃y∃z(I(y)∧J(z)∧F(a,y,z))
-  a=b
-  ∃x(H(x)∧F(b,x))∧∃y∃z(I(y)∧J(z)∧F(b,y,z))
:::
:::

In this case, our first premise is (among other things) a claim about
Superman. Our second premise states that Superman is identical to Clark Kent.
And our conclusion is our first premise, but replacing each occurrence of
'Superman' with 'Clark Kent'.

We adopt this pattern of inference as a rule of inference:

Leibniz's Law (LL)
:   ...α...α..., α=β ⊢ ...α...β...

Here, 'α' and 'β' stand for any two terms (name letters or variables).
'...α...α...' represents a formula with one or more free occurrences of 'α'. And
'...α...β...' represents that same formula, replacing some (or all, or none!)
of the occurrences of 'α' with 'β'.

We also allow a slightly different pattern:

Leibniz's Law (LL)
:   ...α...α..., β=α ⊢ ...α...β...

The only difference here is in the order of the terms in the second
premise.

Here is an example of LL in action:

```{.Playground .FirstOrder options="guides fonts indent tabindent resize" init=now submission=none}
|1.F(a) :PR
|2.a=b  :PR
|3.F(b) :LL 1,2
```

Here is an example of LL in an actual derivation. Can you complete the
derivation?

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" init="now" points=10}
6 F(a)->G(c), G(b)/\F(b), a=b :|-: G(c)
|1.Show G(c)
|2. F(a)->G(c) :PR
|3. G(b)/\F(b) :PR
|4. a=b        :PR
|5. G(a)/\F(a) :LL 3,4
```

:::spoiler
:::solution
::: youtube
<https://youtu.be/iJnsUXMCY1Q>
:::
:::
:::

Note that, in the example above, on line (5), I substituted both occurrences
of 'b', in line (3), with 'a'. But I didn't have to do that. When you apply LL,
you are not required to substitute *all* occurrences of the original term. You
can substitute all, or some, or even none. So these are all correct applications of LL:

```{.Playground .FirstOrder options="guides fonts indent tabindent resize" init=now}
|1.G(b)/\F(b) :PR
|2.a=b        :PR
|3.G(a)/\F(a) :LL 1,2 
|4.G(b)/\F(a) :LL 1,2 
|5.G(a)/\F(b) :LL 1,2 
|6.G(b)/\F(b) :LL 1,2 
```

Note line (6), which is a degenerate case, where we didn't replace *any* of
the 'b's with 'a's. That still counts as a correct application of LL.

When you apply LL to examples involving variables, any variables you replace must be
*free*. And any variables you replace them with must also be free. Can you spot the mistakes? 

```{.Playground .FirstOrder options="guides fonts indent tabindent resize"}
|1.x=y          :PR
|2.F(x)->F(y)   :PR
|3.F(y)->F(y)   :LL 1,2
|4.Ax(F(x)->F(y)) :PR
|5.Ax(F(y)->F(y)) :LL 1,4
|6.G(x)->Ey(F(y)/\H(x)) :PR
|7.G(y)->Ey(F(y)/\H(y)) :LL 1,6
|8.G(y)->Ey(F(y)/\H(x)) :LL 1,6
```

So, stepping back out of the weeds, Leibniz's Law states:

Leibniz's Law
:   If α=β, then everything true of α is also true of β.

Often, it is useful instead to consider the [contrapositive](U7R#contrapositive) of Leibniz's Law:

Leibniz's Law (contrapositive)
:   If something is true of α but not true of β, then α≠β.

For example, in a famous scene from *The Maltese Falcon*, Kasper Gutman discovers that the
stolen statue is made of lead. From this, he infers that it is not the statue he was
after, since the statue he was after was made of gold:

:::solution
::: youtube
<https://youtu.be/7Xuw-XKP1sI>
:::
:::

Here is his inference:

:::standardform
-   The Maltese Falcon is made of gold.
-   This is not made of gold.
-   This is not identical to the Maltese Falcon.
:::

Or, in PL:

:::standardform
-   G(a)
-   ¬G(b)
-   ¬a=b
:::

Similarly, viewers of the eighties classic TV show *Knight Rider* knew that
Garthe Knight was *not* identical to Michael Knight, because Garthe
had a svelte mustache and soul patch, while Michael was clean shaven:

:::solution
::: youtube
<https://youtu.be/ChUa3k4vHeQ>
:::
:::

So, here is the inference viewers made:

::: standardform
-   Garthe has a mustache
-   Michael does not have a mustache
-   Garthe is not Michael
:::

::: standardform
-  M(a)
-  ¬M(b)
-  ¬a=b
:::

We adopt this pattern of inference as a rule of inference, and we
call Leibniz's Law too:

Leibniz's Law (LL)
:   ...α...α..., ¬...β...β... ⊢ ¬α=β

Here, as before, '...β...β...' is the result of replacing all or some (or none!)
of the free occurrences of 'α' in '...α...α...' with free occurrences of 'β'.

As before, we also allow a slight variation of this pattern:

Leibniz's Law (LL)
:   ...α...α..., ¬...β...β... ⊢ ¬β=α

The only difference here is the order of the terms in the conclusion.

Here is an example of this form of LL in action:

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" submission=none init=now}
Example. G(a)\/G(b), ~G(b) :|-: ~a=b
|1.Show ~a=b
|2. G(a)\/G(b) :PR
|3. ~G(b)      :PR
|4. G(a)       :MTP 2,3
|5. ~a=b       :LL 3,4
|6.:DD 5
```

Consider this argument:

> Every frog is green. Something is a frog. Something is not green. So, there are at least two things.

In standard form:

:::standardform
-   Every frog is green.
-   Something is a frog.
-   Something is not green.
-   There are at least two things
:::

Can you see why this is valid?

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
7 Try to explain, as best you can, how the conclusion follows from these premises.
```

:::spoiler
Here is my attempt at an informal explanation: If every frog is green, then the thing that is
not green must not be a frog. So there must be something that is a frog, and
something that is not a frog. Those two things cannot be identical, since one
is a frog, and one isn't. So there must be at least two things.
:::

Here is the argument in PL:

::: standardform
-  Ax(F(x)->G(x))
-  ExF(x)
-  Ex~G(x)
-  ExEy(~x=y)
:::

Now try to complete the derivation, using LL:

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" points=10}
8 Ax(F(x)->G(x)),ExF(x),Ex~G(x):|-: ExEy(~x=y)
```

:::spoiler
:::solution
:::youtube
<https://youtu.be/SeO0tJAEHfw>
:::
:::
:::

### Identity, Reflexivity, and Symmetry

Identity is *reflexive*. That is, everything is identical to itself. So here
is our second rule for identity:

Identity (Id)
:   ⊢ α=α

This rule *has no premises*. This means that you can just write down an identity claim between a thing and itself anywhere, at anytime, without depending on or citing any prior lines. Here are some examples of Id in use:

```{.Playground .FirstOrder options="guides fonts indent tabindent resize" init=now submission=none}
|1. a=a :Id
|2. b=b :Id
|3. c=c :Id
|4. x=x :Id
|5. y=y :Id
```

Notice that the name for the rule is 'Id', not 'ID'. The lowercase 'd' helps
to distinguish it from 'ID', which is indirect derivation.

Here is a partially completed derivation, demonstrating the use of this new rule. Can you complete it? 

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" init=now points=10}
9 :|-: Exx=x
|1.Show Exx=x
|2. a=a  :Id
```

:::spoiler
:::solution
::: youtube
<https://youtu.be/eO1SRBFHAas>
:::
:::
:::

Identity is also *symmetric*. That is, 'a=b' is logically equivalent to 'b=a'.
So here is our third and last rule for identity:

Symmetry (Sm)
:   α=β ⊢ β=α

Here are some examples of Sm in use:

```{.Playground .FirstOrder options="guides fonts indent tabindent resize" init=now}
|1. a=b :PR
|2. b=a :Sm 1
|3. x=y :PR
|4. y=x :Sm 1
```

Again, notice that the name is 'Sm', not 'SM'.

Here is a partially completed derivation, demonstrating the use of this new
rule. Can you complete it? 

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" points=10 init=now}
10 :|-: a=b<->b=a
|1.Show a=b<->b=a
|2. Show a=b->b=a
|3.  a=b :AS
|4.  b=a :Sm 3
|5. :CD 4
|6. Show b=a->a=b
```

:::spoiler
:::solution
::: youtube
<https://youtu.be/5KMCsVyT6Kk>
:::
:::
:::

## Some More Derivations

We now have our full system of derivation for PL with multi-place predicates and
identity. The system is also known as [First-Order Logic]{.vocab}.

([Second-Order Logic]{.vocab} is what we get when we introduce
variables that replace *predicate letters*, and quantifiers over those
variables, allowing for formulas like '∀X(X(a)<->X(b))', which expresses the
claim (roughly) that a and b have exactly the same properties.)

First-Order Logic has sufficient expressive power to model complex arguments.
Consider:

:::standardform
-   Everybody loves Alex and only loves Alex
-   If Alex loves Bennie, then Alex is Bennie
:::

For simplicity, let's ignore the restriction to people, and imagine that the
premise is just 'Everything loves Alex and only loves Alex'. Then our
argument, in PL, looks like this:

:::standardform
-   ∀x(L(x,a) ∧ ∀y(L(x,y)→y=a))
-   L(a,b) → a=b
:::

Now try to derive the conclusion from the premise:

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" points=10}
11 Ax(L(x,a)/\Ay(L(x,y)->y=a)):|-:L(a,b)->a=b
```

:::spoiler
:::solution
:::youtube
<https://youtu.be/mOusTdNm1Wk>
:::
:::
:::

Or, consider the old song lyric:

> | Everybody loves my baby
> | But my baby don't love nobody but me, nobody but me


:::aside
:::solution
:::youtube
<https://youtu.be/d_gHFNDb0Fo>
:::
:::
:::

And consider this surprising argument:

:::standardform
-  Everybody loves my baby
-  My baby doesn't love anybody but me
-  I am my baby
:::

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" points=10}
12 AxL(x,b),~Ex(L(b,x)/\~x=a):|-:a=b
```

:::spoiler
:::solution
:::youtube
<https://youtu.be/PS1_iiiTIDo>
:::
:::
:::

## First-Order Theories

We handled the relation of identity by adding three new rules to our system.
But we don't want to be adding new *rules* to our system for every relation.

Instead, if we want our reasoning to take into account the nature of a
specific relation, we need to develop a *theory* of that relation. A theory is
a collection of *axioms*, which tell us about the nature of the relation.
A first-order theory is a theory that can be expressed in first-order logic.

For example, consider the relation *is a part of*. What are the basic principles that
govern this relation? Here is one:

Transitivity
:   Any part of any part of a thing is itself part of that thing.

That is:

:::transl
∀x∀y∀z(F(x,y) ∧ F(y,z) → F(x,z)) 
:::

This seems right: my leg is a part of me, and my knee is a part of my leg, so my knee is a part
of me. Likewise, Normal is part of Illinois, and Illinois is part of the
United States, so Normal is part of the United States.

Here is a second principle we might consider:

Reflexivity
:   Everything is part of itself.

:::transl
∀xF(x,x)
:::

This seems completely wrong. I am not a part of myself. Illinois is not a part
of Illinois. Nevertheless, contemporary theories of parthood usually endorse
this principle, and then define a [proper part]{.vocab} as a part that is not
identical to the whole. So while I am a part of myself, I am not a *proper* part
of myself. And Illinois is not a *proper* part of itself, but it is a part of
itself.

This takes us to a third principle:

Antisymmetry
:   If *a* is a part of *b* and *a*≠*b*, then *b* is not a part of *a*.

:::transl
∀x∀y(F(x,y) ∧ ¬x=y → ¬F(y,x))
:::

This also seems right. If Normal is a part of Illinois, then Illinois is not a
part of Normal (unless Illinois is identical to Normal, and we are using
'part' in the weird way that allows that everything is a part of itself).

A relation that is reflexive, transitive, and antisymmetric is called a
[partial ordering]{.vocab}. So, if we accept these three principles for
parthood, we can say that parthood is a partial ordering. Other partial
ordering relations from mathematics include the *greater than or equal to*
relation, and the *subset* relation.

This means that our three axioms give us an *incomplete* theory of parthood: a theory that does not yet distinguish parthood from these other relations. To make it
complete, we can try adding additional axioms. For an overview of various
suggested axioms, see [The Stanford Encyclopedia entry on
Merelogy](https://plato.stanford.edu/entries/mereology/).

Suppose we agree on some set of axioms for parthood. How do we accommodate
those within our system? Do we need to introduce new rules of inference, like
we did for identity? We do not. Instead, we can
simply treat these principles as *premises* that we can use in arguments that
involve parthood. For example:

:::standardform
-   All of my parts are material.
-   My brain is a part of me.
-   All of parts of my brain are material.
:::

:::soa
| F(x,y): x is a part of y
| M(x): x is material
| a: me
| b: my brain
:::

For our derivation, we give ourselves the reflexivity, transitivity, and
antisymmetry of parthood as additional premises:

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" points=10}
13 AxF(x,x), AxAyAz(F(x,y) ∧ F(y,z) → F(x,z)), AxAy(F(x,y) ∧ F(y,x) → x=y), Ax(F(x,a)->M(x)), F(b,a) :|-: Ax(F(x,b)->M(x))
```

# More Exercises

```{.ProofChecker .FirstOrder options="guides fonts indent tabindent resize" points=10}
14 :|-: Axx=x
15 :|-: Exx=a
16 :|-: ExEyx=y
17 ExF(x), Ex~F(x) :|-: ExEy~x=y
18 AxAy(F(x,y)->x=y), G(a)/\F(b,a) :|-: G(b)
19 Ax(F(x)->Ay(F(y)->x=y)), F(a)/\G(a) :|-: F(b)->G(b) 
20 :|-: AxAy(x=y<->y=x)
21 AxAy(F(x,y)->F(y,x)), F(a,b), b=c :|-: F(c,a)
22 ~ExEyL(x,y) :|-: ~ExL(x,x)
```

<!-- vim: set ft=carnap :-->
