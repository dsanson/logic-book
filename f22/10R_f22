---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.12/plyr.css
js: 
-   https://cdn.plyr.io/3.6.12/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
---

::: {.auto-tally}
:::

::: cover

# Derived Rules

![Explosion](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/explosion.jpg)

:::

We continue our exploration of the expanded system of derivation,
introducing [derived rules]{.vocab}. The specific learning objectives
for this unit are:

a.  I can complete yet more complicated derivations, involving all the
    connectives, using strategies like showing the negation, showing the
    antecedent, and showing the double negation
b.  I have enabled several derived rules, including all the derived
    rules for using complex negations (NC, DM, NB), and I can use these
    rules to solve derivations

## A First Important Note

This unit is structurally different from the others.
Usually, I make sure that completing the reading assignment is relatively
easy, as every difficult problem includes a video that demonstrates how it
should be solved.

In this unit's reading, the most difficult problems are *not for credit*. Instead,
they are the derivations needed to *enable derived rules*. For these, I have not
provided solutions: I want you to use what you have learned in
earlier units to discover those solutions for yourself.
The problems that are for credit are derivations that are relatively easy to
complete *using the derived rules*, but relatively difficult to complete using
just our basic rules. For those, I have included solutions. But those
solutions will only work for you after you have succeeded at enabling the
corresponding derived rules.

The exercises and mastery check follow suit: they focus on derivations that
are relatively straightforward to complete using derived rules, but often
quite difficult to complete using just our basic rules.

## A Second Important Note

Every derivation that can be solved using a derived rule can also be solved
just using our basic rules. So no derived rule is **required**. Every
derivation in this chapter that invites you to create a new derived rule is
therefore **optional**. Some derived rules are **very useful**, and make other
derivations **much simpler**. Others are instructive, but not very useful.

## Redundant Rules

Some of our rules are redundant. For example, consider the following two
derivations of the same argument, a simple instance of MT:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=none}
 P->Q, ~Q :|-: ~P
|1.Show ~P
|2. P->Q :PR
|3. ~Q   :PR
|4. ~P   :MT 2,3
|5:DD 4
```

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=none}
 P->Q, ~Q :|-: ~P
|1.Show ~P
|2.  P        :AS
|3.  P->Q     :PR
|4.  Q        :MP 2,3
|5.  ~Q       :PR
|6.:ID 4,5
```

The first derivation uses MT. The second does not, and relies on a clever
combination of ID and MP instead. Notice what this shows: we don't need MT!
Every time we use MT, we could use this clever combination of ID and MP
instead. So, in a system with MP and ID, MT is redundant.

Can you complete this derivation without using MT?

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
1 (R->S)->P :|-: ~P->~(R->S) 
```
:::hint

Here is the trick: instead of applying MT on line (4), enter a show line for
what you could have inferred by MT. Then make your assumption for ID, and use
MP.

:::spoiler

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=none}
 (R->S)->P :|-: ~P->~(R->S) 
|1.Show ~P->~(R->S)
|2.  ~P              :AS
|3.  (R->S)->P       :PR
|4.  Show ~(R->S)
|5.    R->S          :AS
|6.    P             :MP 3,5
|7.  :ID 2,6
|8.:CD 4
```
:::
:::

Everything we can do with MT we can do instead just using MP and ID.
So MT is a *redundant rule*: a rule that we don't *need* in our system.

DNI is also redundant in our system. Can you complete this derivation without using DNI?

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
2 P :|-: ~~P
```

:::spoiler
The trick is once again to use ID:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=none}
 P :|-: ~~P
|1.Show ~~P
|2. ~P   :AS
|3. P    :PR
|4.:ID 2,3
```
:::

Since MT and DNI are redundant, we could eliminate them from our system.
That would make our system a bit simpler, in the sense that there would be fewer rules to
remember.
But it would make our derivations a good deal more complicated.
So there is a trade-off here: if we eliminate redundant rules, our derivations
become more complicated. Conversely, if we *add* redundant rules, we can make
our derivations less complicated. 

<!--

## Redundant Connectives

Our system has redundant rules, and our language has redundant connectives.
Remember how we chose not to have a connective for exclusive
disjunction, and pointed out that it wasn't needed, because 'P $\veebar$ Q' is
logically equivalent to '¬(P ↔ Q)'? Doesn't that reason apply with equal force
to '↔', given that 'P ↔ Q' is logically equivalent to '(P→Q) ∧ (Q→P)'?

Notice that, if we eliminated '↔' from our language, and instead used a
conjunction of conditionals, we would also eliminate BC and CB, and instead
use S and ADJ.

Are any of our other connectives redundant? Yes. It turns out that they *all*
are, except for negation. Disjunctions and conjunctions can both be eliminated
in favor of more complicated expressing, using just '¬' and '→'. So a language
containing just '¬' and '→' is [truth-functionally complete]: that is, we can
express every truth function, using just those two connectives.

But we can just as well do it the other way around. A language containing just
'¬' and '∨' is also truth-functionally complete. As is a language containing
just '¬' and '∧'.

Notice what this means about our rules. If we eliminate a connective from our
language, we eliminate its rules and methods too. Suppose we eliminate '→' and
'∨' in favor of '¬' and '∧'. Then we also eliminate MP, MT, CD, MTP, and ADD.
We are left with S, ADJ, DNE, DD, and ID.

::: aside
Our version of ID can only show negations. So we still need DNE and DD. If we
introduced a form of ID that allowed us to show a sentence by assuming its
negation, we could then eliminate both DD and DNE.
:::

In fact, there are two connectives, each truth-functionally complete all on
its own, without the need for '¬':

::: displayed
-   NAND: 'P↑Q': not both (P and Q)
-   NOR: 'P↓Q': not either (P or Q)
:::

So the simplest truth-functionally complete language has just one of these
connectives.

These languages are the simplest. But they are hard to read. For example, 

::: {.displayed .liveshapes}
-   '¬[]{.P}' is truth-functionally equivalent to '[]{.P}↑[]{.P}'.
:::

:::wrapper
::: soasticky
| P: It rains
| Q: It snows
:::

So, in a language without '¬', here is how we translate "It is not raining":

::: displayed
-   It is not raining
-   It is not the case that both (it is raining and it is raining)
-   P↑P
:::

Remember, '↑' means 'not both'. And the negation of 'not both' is 'not not both', which is equivalent to
'both'. So,

:::displayed
-   It is raining and it is snowing.
-   (P↑Q)↑(P↑Q)
:::
:::

This is icky. It is all but impossible for us to read information encoded in
this simplest of all languages.

-->

## Derived Rules

How might we go about adding more rules? 

Our [basic rules]{.vocab} were justified by the fact that they are obviously valid.
But they are not the only rules of inference that are obviously valid.
So we could introduce more basic rules justified in the same way.
But if we do this, our *foundation* becomes less *secure*. We increase the
chance that we might introduce an invalid rule by accident, a rule that
*seems* obviously valid but actually isn't.

Instead, we keep our 9 *basic* rules, and will only introduce new rules as *derived
rules*---rules that are justified by the fact that we can show that they are
redundant by constructing a derivation that does not use them. So:

[A [basic rule]{.vocab} is one of the 9 rules in our system: DN, MP, MT, S,
ADJ, ADD, MTP, BC, or CB. These rules where justified, when they were
introduced, by the fact that they were obviously valid.]{.def}

[A [derived rule]{.vocab} is a rule that is justified by the construction of a
derivation that shows that it is redundant, and so any use of the rule could,
in principle, be replaced by a longer derivation, just using the basic
rules.]{.def}

## QNI


We start with a simple but impractical example, just meant to illustrate the
idea. First, complete the following derivation:


```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
3 P, ~~~~P->Q :|-: ~~~~Q
```

:::hint
To complete this problem, apply DNI twice to P, then apply MP, then apply DNI
twice to Q. For the solution, click on the spoiler inside this spoiler!

:::spoiler
```
1.Show ~~~~Q
2.  P          :PR
3.  ~~P        :DNI 2
4.  ~~~~P      :DNI 3
5.  ~~~~P->Q   :PR
6.  Q          :MP 4,5
7.  ~~Q        :DNI 6
8.  ~~~~~Q     :DNI 7
9.:DD 8
```
:::
:::

That derivation makes heavy use of DNI. But what if we had another rule---call
it **QNI**---that allowed us to introduce *four* negations all at once? Let's
go ahead and *create* this rule. Notice that for the derivation below, the
"Submit" button has been replaced with a "Save" button. Complete the
derivation, and click on the "Save" button to save your new rule. Carnap will
ask you what you want to name your rule. That's up to you, but I'd suggest
naming it 'QNI'.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=saveRule}
QNI P :|-: ~~~~P
```

:::wrapper
:::{.aside .sticky .derived-rules .boxed .liveshapes}
:::

Once you have saved your rule, it should appear in your list of derived rules.
Notice that, in the list of rules, the 'P's have all been replaced by
[]{.P}'s. You can now use this derived rule to infer the quadruple negation of
*any* sentence. Assuming you named the rule QNI, you reference it as 'D-QNI'.
The 'D-' prefix indicates that it is a derived rule.

Below is a partially completed derivation, illustrating how to use the rule.
If Carnap is showing an error on line (4), you may need to trigger it to
recheck the derivation. Try putting your cursor at the end of line (4), and
pressing enter to create a new line. If Carnap still shows an error on line
(4), double-check that you have enabled QNI, by completing the derivation
above and saving the rule as QNI. Or, if you gave the rule a different
name when you saved it, edit line (4) to use that name instead.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now points=10}
4 P/\Q :|-: ~~~~P/\~~~~Q
|1.Show ~~~~P/\~~~~Q
|2. P/\Q   :PR
|3. P      :S 2
|4. ~~~~P  :D-QNI 3
```

Once you have QNI working, you can use it in any derivation. Even derivations
from earlier units.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
5 P->~~~Q, Q :|-: ~~~~~P
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.5.mp4)
:::

As I said at the beginning, this is is meant as a simple but impractical
example. The need to quadruple negate is rare, and applyng DNI twice is easy.
I suggest you go ahead and delete QNI.

![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/deleting-derived-rules.mp4)

## Hypothetical Syllogism (D-HS)

Now for something that might actually be useful.
Complete the following derivation, and save it as "HS", short for
"Hypothetical Syllogism".

```{.ProofChecker .Prop options="guides fonts indent tabindent resize"  submission=saveRule}
HS P->Q, Q->R :|-: P->R
```

Once you have enabled D-HS, try using it to complete this derivation:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
6 Q->S, R->Q, ~S :|-: ~R
```
:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.6.mp4)
:::

Hypothetical Syllogism is an ancient rule, and an obviously valid pattern of
argument. Some textbooks treat it as a basic rule. But it is not a rule we
need. The combination of CD and MP allows us to derive it, and much more
besides. But if we want it, we can happily add it
to our system as a derived rule.

## Biconditionals

Next, let's address a minor annoyance. In our basic system, if you want to
*use* a biconditional, you typically have to use BC, and then apply MP or MT
to the resulting conditional. Wouldn't it be nice if we could just "ponens" or
"tollens" directly on the biconditional?

Complete the following two derivations,
 and save them as 'BPLR' ("Biconditional Ponens Left-to-Right")
 and 'BPRL' ("Biconditional Ponens Right-to-Left"):

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=saveRule}
BPLR P<->Q, P :|-: Q
BPRL P<->Q, Q :|-: P
```

And complete the following two derivations, saving them as BTLR and BTRL:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=saveRule}
BTLR P<->Q, ~P :|-: ~Q
BTRL P<->Q, ~Q :|-: ~P
```

Now you can "ponens" or "tollens" directly on the biconditional, in either
direction.

Try completing (7) without using BC:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
7 Q<->S, ~Q<->~R, ~S :|-: ~R
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.7.mp4)
:::

While you are at it, perhaps you'd like to enable a biconditional variant of
Hypothetical Syllogism? 

:::displayed
-   P↔Q, Q↔R ⊢ P↔R
:::

We could call this "Biconditional Syllogism" or BS. Or maybe there is some
other rule you'd like to enable---some valid pattern of argument that strikes
your fancy. You can create *any derived rules you want*. Once saved, you can
use them on *any assignments*. To do this, you can use a derive-rule-saving
*playground*, like the one below:

```{.Playground .Prop options="guides fonts indent tabindent resize" submission=saveRule}
```

Since this is a playground, there is no set argument for you to derive. So
enter a show line for the conclusion of the argument you want to derive, and help yourself to
the premises of that argument. For example, if you want to derive BS, you want
to start with `Show P<->R`, and then, on lines (2) and (3), `P<->Q :PR` and
`Q<->R :PR`.

You can visit the [Rule Builder Page](Rule-Builder),
 (listed in the [table of contents](Book#table-of-contents) as an appendix)
 for easy access to a Rule Building playground, and use it to create whatever
 rules you'd like.

## Explosion (D-EXP) 


In [Unit 7](07R) we introduced the Principle of Explosion---
 the idea that, from a contradiction, anything follows. 
That principle makes for an incredibly useful rule:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=saveRule}
EXP P, ~P :|-: Q
```

:::hint
There are at least two ways to complete this derivation. One involves creating
a subderivation for ¬¬Q as using ID. Another involves a clever use of ADD.
:::

Once you have enabled D-EXP, 
 whenever you stumble across a contradiction in derivation,
 you can *immediately* infer absolutely anything you want.
That can be handy!
Try completing this derivation using D-EXP:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
8 ~P :|-: P->Q
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.8.mp4)
:::

## Material Conditional (D-MCA and D-MCC)

In [Chapter 6](06R), we also discussed the truth-table for our material conditional:

::: {.itt rows="2"}
   P   Q   P→Q
  --- --- -----
   T   T    T
   T   F    F
   F   T    T
   F   F    T
:::

Notice that, when the antecedent of a material conditional is false, the
conditional is always true. This insight is the basis of another useful rule:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=saveRule}
MCA ~P :|-: P->Q
```

The name "MCA" stands for "Material Conditional, Antecedent". 

Looking again at the truth table, note that when the consequent is true, the
conditional is always true. So here is another useful rule:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=saveRule}
MCC Q :|-: P->Q
```

The name "MCC" stands for "Material Conditional, Consequent".

Once you have enabled these rules, try using MCC to complete this derivation:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
9 P, R<->(Q->P) :|-: R
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.9.mp4)
:::

## Commutativity

Many of the techniques you learned in Algebra for manipulating mathematical
formulas are based on facts about which mathematical operations are or are not
commutative, distributive, and associative.
Early on in this course, you were likely tempted to apply
those algebraic manipulations to sentences in SL, hoping to "simplify" complex
sentences, by "distributing" negations and reordering conjunctions and
disjunctions. I hope by now those habits have been drilled out of you!

Still, there are facts about which of our connectives are or are not
commutative, distributive, and associative. And we can build derived rules
based upon those facts.

To say that a function is [commutative]{.vocab} is to say that its output
doesn't depend on the order of its inputs. Addition is commutative,
subtraction is not:

:::centered
| x + y = y + x
| x - y ≠ y - x
:::

Which of our binary connectives are commutative? Conjunction, disjunction, and
the biconditional. The conditional is not commutative, since 'P→Q' is not
equivalent to 'Q→P'.

We can verify these claims with truth tables:

```{.TruthTable .Simple options="nocounterexample" points=10}
10 P/\Q, Q/\P
11 P\/Q, Q\/P
12 P<->Q, Q<->P
13 P->Q, Q->P
```

We can enable these facts as rules, too.
To do so, we need to complete the appropriate derivations. These two are
relatively straightforward:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=saveRule}
COMCONJ P/\Q :|-: Q/\P
COMBICON P<->Q :|-: Q<->P
```

The proof that disjunction is commutative is much more difficult! You will need to use ID and MTP. Stick with it, and if you get stuck,
click on the spoiler for some hints.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=now submission=saveRule}
COMDISJ P\/Q :|-: Q\/P
```

:::spoiler
You need to use the power of ID here. So your first step should be to enter a
show line for ¬¬(Q ∨ P).

:::spoiler
The only way to use your assumption, ¬(Q ∨ P), is as one half of a
contradiction. That means you need to find a way to get Q ∨ P. But the only
way to get Q ∨ P is by ADD.

:::spoiler
The only way to get Q ∨ P by ADD is by having Q by itself, or P by itself. So enter a show line for Q. But that won't quite
work, right?

:::spoiler
So enter a show line for ¬¬Q instead. That allows you to make use of the power
of ID.
:::
:::
:::
:::

## Contraposition

The conditional is not commutative.
But, as we learned in [Unit 6](06R),
 a conditional is equivalent to its contrapositive.
Here are two rules based on this fact:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=saveRule}
CPOS P->Q :|-: ~Q->~P
CPOSN ~P->~Q :|-: Q->P
```

In practice, these rules are dangerous. It is easy to get enamored with them,
and waste time in a derivation going in circles or spinning your wheels.
Consider:

:::proof
4.   P → Q
5.   ¬Q
6.   ¬Q → ¬P [D-CPOS 4]{.just} 
7.   ¬P      [MP 5,6]{.just}
:::

You can do this. But it is easier to just apply MT.
So I would discourage you from using CPOS or CPOSN unless you have some
specific need for the contrapositive. Here is an example where contraposition
does simplify the derivation:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
14 :|-: (P->Q) <-> (~Q->~P)
```

## "Distributing" Negations

As you know, multiplication *distributes* over addition:

:::centered
$x\times (y + z) = (x \times y) + (x \times z)$
:::

As a special case of this, multiplication by -1 distributes over addition,
and in Algebra, you were encouraged to think of this as the distribution of a
negative sign:

:::centered
$-(y + z) = -y + -z$
:::

This pattern has likely been so deeply drilled into your head that you needed
to learn to resist the urge to "distribute" negations in this class.

Negation does **not** distribute over *any* of our connectives.
We can show this by constructing the appropriate truth tables:

```{.TruthTable .Simple options="nocounterexample" points=10}
15 ~(P/\Q),~P/\~Q
16 ~(P\/Q),~P\/~Q
17 ~(P->Q),~P->~Q
18 ~(P<->Q),~P<->~Q
```

Examine each truth table, 
and verify that each one shows that the two sentences are **not** truth-functionally equivalent. 

There are "distribution laws" that apply to some of our connectives.
For example, conjunction distributes over disjunction:

```{.TruthTable .Simple options="nocounterexample" points=10}
19 P/\(Q\/R),(P/\Q)\/(P/\R)
```

You could derive this, and save it as a rule. But it is unlikely to be useful
in future derivations.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission="saveRule"}
DISTCONDISJ P/\(Q\/R) :|-: (P/\Q)\/(P/\R)
```

## Negations of Conditionals

We cannot *distribute* a negation over a conditional.
So what can we infer from the negation of a conditional?
Consider the truth table:

```{.TruthTable .Simple options="nocounterexample immutable nocheck display" submission=none}
NegCond ~(P->Q)
|       F TTT
|       T TFF
|       F FTT
|       F FTF
```

Note that the negation of the conditional is only true on the second row:
 when its antecedent is true *and* its consequent is false.
So let's enable a rule that allows us to infer just that:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=saveRule}
NC ~(P->Q) :|-: P/\~Q
```

:::hint
When you need to show a conjunction, you need to show each conjunct
separately, so you can put them together using ADJ. So, in outline:

```
Show P/\~Q
  Show ~~P
    ⋮
  :ID
  Show ~Q
    ⋮
  :ID
  P  DNE
  P/\~Q :ADJ
:DD
```

(I am showing ¬¬P instead of P, because that allows me to use ID.)

:::hint
To complete those sub-derivations, you need to use the premise, ¬(P → Q). The
only way to use that is as one half of a contradiction. So you need to get P →
Q. You can do that by creating another subderivation, or you might consider
using one or the other of D-MCA or D-MCC.
:::
:::

D-NC ("Negation of a Conditional") is a **very useful** derived rule.
It makes some derivations *a lot* simpler. For example:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
20 ~(R->S),R->T,P->S :|-: ~P/\T
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.18.mp4)
:::

D-NC can be thought of as a pseudo-distribution rule for conditionals:
 you can think of the negation as "distributing" to the consequent,
 while the '→' becomes an '∧'.

## Negations of Biconditionals

What about the negation of a biconditional?
Again, let's start by thinking about the truth table:

```{.TruthTable .Simple options="nocounterexample immutable nocheck display" submission=none}
¬Biconditional ~(P<->Q)
|             F TTT
|             T TFF
|             T FFT
|             F FTF
```

The biconditional is true when its two parts *agree* in truth value.
So its negation is true when its two parts *disagree* in truth value.
But that means that the first part *agrees* in truth value with the *negation* of the second
part:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=saveRule}
NB ~(P<->Q) :|-: P<->~Q
```

:::hint
This one is not easy.
Since you are trying to show a conditional,
 you will need to show both conditionals separately, and then use CB to put
them together. And, you will need to use ¬(P ↔ Q) as one half of a
contradiction. That means you will need to show P ↔ Q, probably more than
once.

One way to shorten the derivation is to remember to use some of your new
derived rules. D-MCC and D-MCA are especially useful here, and will allow you to
avoid *some* of the subderivations.
:::

D-NB ("Negation of a Biconditional") is also a **very useful** derived rule.
It makes some derivations *a lot* simpler. For example:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
21 ~(P<->Q), ~(R<->Q) :|-: P->R
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.19.mp4)
:::

Again, you can think of D-NB as a pseudo-distribution: 
the negation "distributes" to the second part, not the first; the
biconditional remains a biconditional.

## DeMorgan's Laws

Recall that there are two equally good answers to this translation problem:

:::soa
| R: It rains
| S: It snows
:::

```{.Translate .Prop points=10}
22 ~R/\~S, ~(R\/S): It neither rains nor snows
```

:::spoiler
The two equally good answers are:

::: displayed
-   ¬(R ∨ S)
-   ¬R ∧ ¬S)
:::
:::

There are two equally good answers, because '¬(P∨Q)' and '¬P∧¬Q' are
truth-functionally equivalent, as established by this truth table:

```{.TruthTable .Simple options="nocounterexample" points=10}
23 ~(P\/Q), ~P/\~Q
```

This is one of several related equivalences known as "DeMorgan's Laws", after [Augustus De
Morgan](https://en.wikipedia.org/wiki/Augustus_De_Morgan){target="_blank"
rel="noopener noreferrer"}, <!--_--> a 19th century
logician. 

Here is another:

```{.TruthTable .Simple options="nocounterexample" points=10}
24 ~(P/\Q), ~P\/~Q
```

Like NB and NC, DeMorgan's Laws are pseudo-distribution laws.
"Distribute" the negation to the two parts of a conjunction,
 but also "flip" the conjunction to a disjunction.
Or "distribute" the negation to the two parts of a disjunction,
 but also "flip" the disjunction to a conjunction.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission="saveRule"}
DMNC ~(P\/Q) :|-: ~P/\~Q
```

:::hint
Remember, when your show line is a conjunction, as with DMNC, you need to show
each conjunct separately, and then use ADJ to put them together. You will use
premise, '¬(P ∨ Q)', as one half of a contradiction. Remember the power of
ADD!
:::

Heads up: the derivation that enables DMND is much more challenging than the
derivation that enables DMNC.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission="saveRule"}
DMND ~(P/\Q) :|-: ~P\/~Q
```

:::hint
You need to give yourself the power of ID to solve this problem. So your very
first move should be to start a subderivation, to show '¬¬(¬P ∨ ¬Q)', and make
your assumption for ID.

:::hint
You will use your premise, '¬(P ∧ Q)', as one half of a contradiction. That
means you need to get 'P ∧ Q'. So you will want to show P (or, rather, ¬¬P),
and then Q (or, rather, ¬¬Q), and put them together using ADJ.
:::
:::

The suggested names for these two rules are meant to help you remember which
is which: "D-DMNC" = DeMorgan's, Negation *to* Conjunction; "D-DMND" = DeMorgan's,
Negation *to* Disjunction. 

Again, D-DMNC and D-DMND are both **very useful** derived rules. 

Try using D-DMNC on the first premise of this derivation, and notice how that
makes the derivation relatively simple:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
25 ~(P\/Q), R->P, S->Q :|-: ~R/\~S
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.23.mp4)
:::

Try completing this derivation using ID, and notice how that immediately leads
you to an application of D-DMNC:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
26 P->Q, ~P->R:|-: Q\/R
```

:::solution
![](https://reggienet.illinoisstate.edu/access/content/user/desanso/public/vid/R11.24.mp4)
:::

Together, D-NC, D-NB, D-DMNC, and D-DMND allow us to handle every case in
which a negation is outside parentheses.
They can be thought of collectively as a complete set of pseudo-distribution
laws, allowing us to "simplify" such sentences.

In Algebra, the inverse of distribution is factoring:

:::centered
| $xy + xz$
| $x(y + z)$
:::

Our pseudo-distribution rules are based upon truth-functional equivalences. So
we can also introduce pseudo-factoring rules, that allow us to go in the other
direction. But as a practical matter, these derived rules are much less
useful.

``` {.ProofChecker .Prop options="guides fonts indent tabindent resize" submission="saveRule"}
CN P/\~Q :|-: ~(P->Q)
BN P<->~Q :|-: ~(P<->Q)
DMCN ~P/\~Q :|-: ~(P\/Q)
DMDN ~P\/~Q :|-: ~(P/\Q)
```

## Conditionals and Disjunctions

Remember when we introduced the idea that 'unless' means 'or',
 and maybe you had the sense that really, 'unless' meant 'if not'?
You weren't wrong. It's just that 'if not' and 'or' mean the same thing: 

```{.TruthTable .Simple options="nocounterexample" points=10}
27 (~P->Q), P\/Q
```

Again, we can leverage this equivalence into a rule:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=saveRule}
CDJ ~P->Q :|-: P\/Q
```

:::hint
You will want to show ¬¬(P ∨ Q), and give yourself the assumption for ID. Then
you'll want to apply the relevant form of DM...
:::

There are several closely related equivalences. You may wish to prove these
and save them as rules in the [Rule Builder](Rule-Builder):

:::displayed
-   P ∨ Q ⊢ ~P → Q
-   P → Q ⊢ ~P ∨ Q
-   ~P ∨ Q ⊢ P → Q
:::

D-CDJ is especially useful,
 because it allows us to leverage the power of CD to prove disjunctions.
Here is an example:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=none}
Ex2 P\/Q :|-: Q\/P
|1.Show Q\/P
|2. Show ~Q->P
|3.  ~Q :AS
|4.  P\/Q :PR
|5.  P :MTP 3,4
|6. :CD 5
|7. Q\/P :D-CDJ 2
|8.:DD 7
```

Note that you already completed this very same problem, when you
enabled [D-COMDISJ](#exercise-COMDISJ) above. Presumably this was not the method you used!

## Managing Your Newfound Freedom

You are free to create and use any derived rules you want.
You can use them on the exercises. You can use them in the Mastery Checks.
You can go back to earlier Mastery Checks, designed for folks who were first
learning how to use MP and MT, and solve the problems instead using all the
power of all these new rules.

If you want to create a new rule that wasn't described above, use the [Rule
Builder Page](Rule-Builder). That's what it is for.

You can also manage your rules by going to the Rule Builder page, or you can
manage them at the bottom of your [User Page](/user). Note that, on your User
Page, the rules are represented using Greek letters instead of boxes and
circles.

But with new powers come new dangers. Using derived rules, it is easy to spin
your wheels, madly transforming one sentence into another into another,
without actually making any forward progress.
In Algebra, you learned to leverage similar transformations, where your goal
was usually either to simplify a formula, or to factor it.
But here, your goal is not to simplify, or to factor. Your goal is to
*complete the derivation*. So you need to learn to use your new powers
selectively, when they can help you move toward that goal.

So, a piece of advice: avoid using derived rules willy-nilly.
Instead, use them in specific situations, where they help solve specific
problems.

For example, one specific situation that is often a problem is the situation
where you have a premise that is complex negation, '¬(BLAH)'. In this
situation, our pseudo-distribution rules help us move forward, by giving us
something else that is easier to use. So I'd encourage you to make heavy use
of these rules:

:::displayed
-   D-NC, D-NB, D-DMNC, D-DMND
:::

Another specific situation that you can find yourself in is the situation
where you have not yet derived what you need to get, but you have derived a
contradiction. In this situation, Explosion (D-EXP) is a lovely shortcut,
allowing you to immediately infer whatever it is that you needed.

Several derived rules offer convenient shortcuts, which can make it easier for
you to think through complicated derivations. D-MCA and D-MCC are like this.
For example, if you need a conditional, and you already have the negation of
the antecedent, D-MCA allows you to get that conditional immediately.

Rules like Biconditional Ponens and Tollens are again convenient shortcuts,
but far from essential for anyone who has a good grasp of BC, MP, and MT.

And then there are rules that are instructive, and worth knowing, because they
give you a better sense of what might follow from what, but are rarely worth
actually using. Rules like D-CPOS, D-CN, and D-BN, for example. Or even D-CDJ,
which captures a really neat fact about the relationship between conditionals
and disjunctions, but isn't something you really *need*.

<!--end of wrapper-->
:::

## Lectures

Here are two video lectures, based on an earlier version of this chapter. 

::: youtube
<https://youtu.be/4brtWGX1d1g>
:::

::: youtube
<https://youtu.be/nr7pnLFrmpk>
:::


<!-- vim: set ft=carnap :-->
