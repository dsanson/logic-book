---
base-css:
-   https://carnap.io/shared/dsanson@gmail.com/sanson-book.css
-   https://cdn.plyr.io/3.6.8/plyr.css
js: 
-   https://cdn.plyr.io/3.6.8/plyr.polyfilled.js
-   https://carnap.io/shared/dsanson@gmail.com/logic-book.js
-   https://hypothes.is/embed.js
---

::: {.auto-tally}
:::

::: cover

# Derivations with '∧', '∨', and '↔︎'

![](http://reggienet.illinoisstate.edu/access/content/user/desanso/public/img/sniffing_dog.jpg){alt="drawing of a hound sniffing a scent"}

::: epigraph
For, says this ancient authority \[Chrysippus\], the dog in effect reasons as
follows: the animal either went this way or that way or the other; he did not
go this way and he did not go that; therefore, he went the other.

[Sextus Empiricus, reporting on the views of Chrysippus]{.source}
:::

:::

**NOTE: this reading is currently missing some videos. I will upload videos
ASAP**


In previous units, we covered derivations involving conditionals and
negations.
In this unit, we expand our system of derivation to include rules for
all five connectives. The specific learning objectives for this unit
are:

a.  I can identify instances of all the basic rules of sentential logic
b.  I can complete simple derivations involving all the connectives
c.  I can complete more complicated derivations involving all the
    connectives

## New Rules

[Til now]{.newthought}, we have only considered derivations involving '→' and '¬'. 
But we have three more connectives: '∧', '∨', and '↔'. To handle these, we
introduce six more rules.

In every case, the specific connective is an essential part of the rule. 
For example, Modus Ponens and Modus Tollens **only work for conditionals**.
This is Modus Ponens:

:::standardform
-   []{.P} **→** []{.Q}
-   []{.P}
-   []{.Q}
:::

To get an instance of MP, you plug in any two sentences to the boxes and
circles, e.g.,

:::standardform
-   [It is sunny]{.P} **→** [I go for a walk]{.Q}
-   [It is sunny]{.P}
-   [I go for a walk]{.Q}
:::

But the connective, '→' is not a variable. You cannot "plug in" some other
connective, and still claim that what you have is an instance of MP.
For example, this is not an instance of MP:

:::{.standardform .xed}
-   P ∨ Q
-   P
-   Q :MP
:::

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
1 Explain why this isn't an instance of MP.
```

So, as you learn the new rules, keep this in mind.
Each rule is tied to a specific connective, and only works for the connective.

## Addition (ADD)

:::stickywrapper
:::{.aside .sticky .flex}
:::ruledisplay
**Addition (ADD)**

:::{.displayed .liveshapes}
| []{.P} ⊢ []{.P} ∨ []{.Q}
| []{.P} ⊢ []{.Q} ∨ []{.P}
:::
:::
:::

We start with our two new rules for disjunction ('∨').

The first is called "[Addition (ADD)]{.vocab}",
and it actually comes in two forms:

:::{.standardform .liveshapes}
-   []{.P}
-   []{.P} ∨ []{.Q}
:::

:::{.standardform .liveshapes}
-   []{.P}
-   []{.Q} ∨ []{.P}
:::


```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
2 Can you spot the difference between these two forms of ADD? What is it? 
```

:::{.reaction .correct ex=2}
It's about the order of the disjuncts in the conclusion.
In the first form, we added []{.Q} to the right, giving us []{.P} ∨ []{.Q}.
In the second form, we added []{.Q} to the left, giving us []{.Q} ∨ []{.P}.
:::

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
3 Give your own example of an English instance of ADD. That is, choose two English sentences, and fit them into the argument form.
```

:::{.reaction .correct ex=3}
Obviously, there are lots of possible correct answers. Here is one:

:::{.standardform .liveshapes}
-   [Normal is in Illinois]{.P}.
-   [Normal is in Illinois]{.P} ∨ [Normal is in Wisconsin]{.Q}.
:::

Do you see why this is valid?
:::

```{.QualitativeProblem .ShortAnswer give-credit="onSubmission" points=10}
4 Can you explain why the form ADD is valid? Remember, our connective, '∨', expresses an inclusive disjunction.
```

:::{.reaction .correct ex=4}
'∨' expresses an *inclusive* disjunction.
If you know that 'P' is true, that is enough to guarantee that 'P ∨ Q' is true.
And it is also enough to guarantee that 'Q ∨ P' is true.
If '∨' expressed exclusive disjunction, this wouldn't be valid.
:::

Here is another instance of ADD:

::: standardform
-   Normal is in Illinois.
-   Normal is in Illinois or I'm a rooster's uncle.
:::

Again, assuming the premise is true, that is enough to make the conclusion
true, whether or not it is true that I'm a rooster's uncle.

I do have a pet parrot, and my sister keeps chickens, including roosters.
Does that make me a rooster's uncle? I dunno. But I do know that *either*
Normal is in Illinois *or* I'm a rooster's uncle, because I know that Normal
is in Illinois.

(It turns out the phrase, "Well I'll be a [monkey's
uncle](https://en.wikipedia.org/wiki/Monkey%27s_uncle){target="_blank"
rel="noopener noreferrer"}' comes from the 1920s, and was used by creationists
to mock the evolution. 
Given that I do share a common evolutionary ancestor with monkeys,
I suppose in original intended sense, I am a monkey's (very distant) uncle. 
So I suppose that, in the same sense, I am also a rooster's (even more
distant) uncle.)

Another way to think through the validity of ADD is to construct its truth
table, and verify that it is truth-functionally valid:

```{.TruthTable .Validity options="nocounterexample turnstilemark" points=10}
5 P :|-: P\/Q
```

:::{.reaction .correct ex=5}

```{.TruthTable .Partial options="strictGivens nocounterexample immutable nocheck display" submission=none}
5 P :|-: P\/Q
| T  T   T TT
| T  T   T TF
| F  T   F TT
| F  T   F FF
```
Looking at the first two rows of the truth table, 
 we can the truth of the premise, 'P', 
 is enough to guarantee the truth of the conclusion, 'P ∨ Q'.

So it really doesn't matter what the added disjunct, 'Q', says:
 it might be true, or it might be false;
 it might be obvious, or it might be wildly off.
Either way, when it comes to the truth of 'P ∨ Q',
 the truth of 'P' can hold down the fort on its own.
:::

One more example:

::: standardform
-   The state bird of Illinois is the Northern Cardinal
-   Either the state bird of Illinois is the Northern Cardinal or the
    President is constipated.
:::

Again, assuming the premise is true, that is enough to make the conclusion
true, regardless of our President's current digestive state.

```{.QualitativeProblem .MultipleSelection points=10}
6 Which of the following follows, by ADD, from P?
| *P ∨ Q
| *Q ∨ P
| *P ∨ (R ↔ S)
| *¬(P ∧ Q) ∨ P
```

:::{.reaction .correct ex=6}
Those are all instances of ADD! ADD lets you add *any sentence* to your
premise, to create a disjunction:

:::{.standardform .liveshapes}
-   [P]{.P}
-   [P]{.P} ∨ [Q]{.Q}
:::

:::{.standardform .liveshapes}
-   [P]{.P}
-   [Q]{.Q} ∨ [P]{.P}
:::

:::{.standardform .liveshapes}
-   [P]{.P}
-   [P]{.P} ∨ [(R ↔ S)]{.Q}
:::

:::{.standardform .liveshapes}
-   [P]{.P}
-   [¬(P ∧ Q)]{.Q} ∨ [P]{.P}
:::
:::

ADD is an inference rule that we can use in derivations.
Let's first consider an informal example, and then see what it looks like in
our system of derivation.

Consider the following argument, from a pessimistic Bears fan at the start of
the 2021 season:

:::standardform
-   Andy Dalton will start.
-   If either Justin Fields or Andy Dalton will start, the Bears will probably
    lose.
-   The Bears will probably lose.
:::

Does that conclusion follow from those premises. Yes it does. Here is a proof:

::: proof
1.   [The Bears will probably lose]{.show}
2.   [Andy Dalton will start [PR]{.just}]{.indent}
3.   [Either Justin Fields or Andy Dalton will start [ADD 2]{.just}]{.indent}
4.   [If either Justin or Andy starts, the Bears will probably lose
     [PR]{.just}]{.indent}
5.   [The Bears will probably lose [MP 3,4]{.just}]{.indent}
6.   [DD 5]{.just} 
:::

See how we use ADD, to put ourselves in a position to use MP?
We know that *Dalton will start*, and we know that if *Dalton or Fields
will start*, the Bears will probably lose. So we use ADD to infer that *Dalton or
Fields will start*, so we can then use MP to infer that the Bears will
probably lose.

In order to see what this looks like in our system, we first need to translate
the premises and conclusion into SL.

:::wrapper
:::soa
| P: Justin Fields will start.
| Q: Andy Dalton will start.
| R: The Bears will probably lose.
:::

The first premise and conclusion are both atomic. What about the second
premise?

```{.Translate .Prop points=10}
7 P\/Q->R : If either Justin or Andy starts, the Bears will probably lose.
```

ADD VIDEO

:::{.reaction .correct ex=7}
So the argument is:

:::standardform
-   Q
-   Q∨P → R
-   R
:::
:::

Here then is the derivation:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
8 Q, P\/Q->R :|-: R
```

ADD VIDEO


Here is another derivation for you to try:


```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
9 P->Q, P :|-: R\/Q
```

:::solution
::: youtube
<https://youtu.be/u0mXFRb3GX4>
:::
:::

:::
:::

## Modus Tollendo Ponens (MTP)

:::stickywrapper
:::{.aside .sticky .flex}
:::ruledisplay
**Modus Tollendo Ponens (MTP)**

:::{.displayed .liveshapes}
| []{.P}∨[]{.Q}, ¬[]{.P} ⊢ []{.Q}
| []{.P}∨[]{.Q}, ¬[]{.Q} ⊢ []{.P} 
:::
:::
:::

ADD is a rule for *getting* a disjunction when you need one.
Our next rule, [Modus Tollendo Ponens (MTP)]{.vocab} is a rule for *using* a disjunction
as a premise. The basic idea is, if you know that a disjunction is true, and
you know that one its disjuncts is false, you can infer that the other
disjunct is true:

:::{.standardform .liveshapes}
-   []{.P} ∨ []{.Q}
-   ¬[]{.P}
-   []{.Q}
:::

Like ADD, MTP comes in two forms:

:::{.standardform .liveshapes}
-   []{.P} ∨ []{.Q}
-   ¬[]{.Q}
-   []{.P}
:::

These forms differ only in whether we negate the left disjunct or the right
disjunct.

Suppose I'm looking for my phone, and I know that

::: displayed
-  Either it is in the bathroom or it is on my bed,
:::

I look in the bathroom, and it isn't there, so now I also know that

::: displayed
-  It is not in the bathroom,
:::

So I conclude:

::: displayed
-  It is on my bed.
:::

That's an instance of MTP:

:::{.standardform .liveshapes}
-   Either [it is in the bathroom]{.P} or [it is on my bed]{.Q}
-   It is not the case that [it is in the bathroom]{.P}
-   [It is on my bed]{.Q}
:::

The ancient logician [Chrysippus](https://en.wikipedia.org/wiki/Chrysippus)
describes a dog chasing a rabbit down a path. Reaching a fork in the path, the
dog sniffs one fork, and goes down the other fork **without sniffing**. This,
Chrysippus argued, shows that dogs use logic. The dog's inference was:

::: standardform
-   Either the rabbit went left or the rabbit went right
-   The rabbit didn't go left
-   The rabbit went right
:::

Or, in SL:

::: standardform
-   T ∨ R
-   ¬R
-   T
:::

Again the basic idea is this: if you know that one or the other of two
disjuncts is true, and you know that it is not one, then you can infer that it
must be the other.

'Modus Tollendo Ponens' is yet another funny Latin name. It's actually one of four
classical rules of inference---the "Modus" family of rules---all named according to the same scheme. 

Here are all four, with their full Latin names:

Modus Ponendo Ponens
:   []{.P} → []{.Q}, []{.P} ⊢ []{.Q}

Modus Tollendo Tollens
:   []{.P} → []{.Q}, ¬[]{.Q} ⊢ ¬[]{.P}

Modus Tollendo Ponens
:   []{.P} ∨ []{.Q}, ¬[]{.P} ⊢ []{.Q}

Modus Ponendo Tollens
:   []{.P} $\veebar$ []{.Q}, []{.P} ⊢ ¬[]{.Q}


Remember, 'Modus' means "way" or "method". "Ponendo" means "by putting" or "by
asserting", while "tollendo" means "by taking" or "by denying". And "Ponens" and
"Tollens" mean "putting/asserting" and "taking/denying".

So, Modus Ponendo Ponens---our old friend MP---is the method that allows you
to assert by asserting. More specifically, it allows you to assert the
consequent by asserting the antecedent. 
And Modus Tollendo Tollens---our old friend MT---is the method that allows you
to deny by denying. More specifically, it allows you to deny the antecedent by
denying the consequent.

Meanwhile, our new rule, Modus Tollendo Ponens, is the method that allows you
to assert by denying: in this case, you get to assert one disjunct by denying
the other.

The last rule, which we will not be using, is only valid for exclusive
disjunctions. It allows us to deny by asserting. That is, deny one disjunct by
asserting the other.

MTP is in some ways similar to MP, and in some ways similar to MT.
You might think of it as combining a bit of both.
But it is important to understand that MP and MT are rules for
**conditionals**, while MTP is a rule for **disjunctions**.
You cannot mix and match, and try to apply MP or MT to a disjunction, or MTP
to a conditional. That's not how this works. That's not how any of this works.

```{.QualitativeProblem .MultipleSelection points=10}
10 What follows, by MTP, from "It is raining or snowing" and "It is not snowing"?
| *It is raining
| It is not raining
| It is raining and not snowing
```

``` {.Translate .Exact points="10"}
11 P: What follows, by MTP, from 'Q ∨ P' and '¬Q'?
12 Q: What follows, by MTP, from 'Q ∨ P' and '¬P'?
13 ~P: What follows, by MTP, from 'Q ∨ ¬P' and '¬Q'?
14 P/\Q : What follows, by MTP, from '(P ∧ Q) ∨ R' and '¬R'?
15 R : What follows, by MTP, from '(P ∧ Q) ∨ R' and '¬(P ∧ Q)'?
```

ADD VIDEO

Here is an example of MTP in action:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=true submission=none}
Ex P\/Q, ~P\/~R, ~Q :|-: ~R
|1.Show ~R
|2.  P\/Q     :PR
|3.  ~Q       :PR
|4.  P        :MTP 2,3
|5.  ~P\/~R   :PR
|6.  ~~P      :DN 4
|7.  ~R       :MTP 5,6
|:DD 7
```

And here is an example for you to try:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
16 P\/(Q\/R), ~P :|-: ~R->Q 
```

:::solution
::: youtube
<https://youtu.be/TnuYD3N-88A>
:::
:::

:::

## Simplification (S)

Next, our two new rules for conjunction ('∧').



:::stickywrapper
:::{.aside .sticky .flex}
:::ruledisplay
**Simplification (S)**

:::{.displayed .liveshapes}
| []{.P} ∧ []{.Q} ⊢ []{.P}
| []{.P} ∧ []{.Q} ⊢ []{.Q}
:::
:::
:::

The first is called [Simplification (S)]{.vocab}:

:::{.standardform .liveshapes}
- []{.P} ∧ []{.Q}
- []{.P}
:::

Like ADD and MTP, S has two forms. The second form is:

:::{.standardform .liveshapes}
- []{.P} ∧ []{.Q}
- []{.Q}
:::

Remember what '∧' means. 'P ∧ Q' says that both P *and* Q are true.
Simplification allows you to infer from that that P is true, and it also
allows you to infer that Q is true. In other words, given two pieces of
information packed together into a
conjunction, S allows you to infer each piece of information on its own.

Suppose you are directing a biopic about the race horse Secretariat, 
 and you want to cast a good dog in the lead role.
And suppose you know that,

::: displayed
-   Mr. Peanut Butter is a good dog and he is a golden lab.
:::

From this, you can infer, by Simplification:

::: displayed
-   Mr. Peanut Butter is a good dog 
:::

So, here is your argument:

::: {.standardform}
-   Mr. Peanut Butter is a good dog and he is a golden lab.
-   Mr. Peanut Butter is a good dog. 
:::

This inference is *so obviously valid* that sometimes folks struggle to see it
as an inference at all!

``` {.Translate .Exact points="10"}
17 R, P: What is something that follows, by S, from P ∧ R?
18 ~P, ~Q: What is something that follows, by S, from ¬P ∧ ¬Q?
19 P->Q,Q->P: What is something follows, by S, from '(P→Q) ∧ (Q→P)'?
```

ADD VIDEO

Sometimes folks get so excited by the power and simplicity of S
that they want to do it to everything, not just conjunctions.
But S only works with conjunctions.
You cannot validly infer 'P' from P ∨ Q', or from 'P → Q', or from 'P ↔ Q'.
Remember, the connective, '∧', is an essential part of the rule.


```{.QualitativeProblem .MultipleChoice points=10}
20 What follows, by S, from 'P → Q'?
| P
| Q
| *Nothing: simplification only works with conjunctions
21 What follows, by S, from 'P ∨ Q'?
| P
| Q
| *Nothing: simplification only works with conjunctions
22 What follows, by S, from 'P ↔ Q'?
| P
| Q
| *Nothing: simplification only works with conjunctions
23 What follows, by S, from '¬(P ∧ Q)'?
| P
| Q
| *Nothing: simplification only works with conjunctions
```

Here is a derivation for you to try, that requires simplification:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
24 P/\Q,Q->R :|-: R
```

ADD VIDEO

:::

### Adjunction (ADJ)

:::::::stickywrapper
::::::{.aside .sticky .flex}
:::::ruledisplay
**Adjunction (ADJ)**

::::{.displayed .liveshapes}
| []{.P}, []{.Q} ⊢ []{.P} ∧ []{.Q}
::::
:::::
:::::ruledisplay
**Simplification (S)**

::::{.displayed .liveshapes}
| []{.P} ∧ []{.Q} ⊢ []{.P}
| []{.P} ∧ []{.Q} ⊢ []{.Q}
::::
:::::
::::::

S lets us take apart conjunctions. [Adjunction (ADJ)]{.vocab}
lets us join them together:

:::{.standardform .liveshapes}
-   []{.P}
-   []{.Q}
-   []{.P} ∧ []{.Q}
:::

For example,

::: standardform
-  Bojack is a horse.
-  Bojack is depressed.
-  Bojack is a horse and Bojack is depressed.
:::

A conjunction allows us to express, in a single claim, the fact that two
independent pieces of information are both true. Adjunction reflects this:
given two separate pieces of information as premises, you are allowed to join them
together into a conjunction.

Here is a simple example, using both **S** and **Adjunction (ADJ)**:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" init=true submission=none}
 P/\Q :|-: Q/\P
|1.Show Q/\P
|2.  P/\Q   :PR
|3.  P      :S 2
|4.  Q      :S 2
|5.  Q/\P   :ADJ 3,4
|6.:DD 5
```

Here is a derivation for you to try:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
25 P/\(P->Q) :|-: P/\Q 
```

:::solution
::: youtube
<https://youtu.be/EesD8OIDaUQ>
:::
:::

:::

:::stickywrapper
:::{.aside .sticky .flex}
:::ruledisplay
**Addition (ADD)**

:::{.displayed .liveshapes}
| []{.P} ⊢ []{.P} ∨ []{.Q}
| []{.Q} ⊢ []{.P} ∨ []{.Q}
:::
:::
:::ruledisplay
**Adjunction (ADJ)**

:::{.displayed .liveshapes}
| []{.P}, []{.Q} ⊢ []{.P} ∧ []{.Q}
:::
:::
:::

Addition and Adjunction have similar names. They also have similar looking
conclusions. It is easy to confuse them. But they are very different rules.

Addition says that, given *one* sentence that you know to be true, you are free to **add** any other
sentence, whether true or false, to form a disjunction:

:::{.standardform .liveshapes}
-   []{.P}
-   []{.P} ∨ []{.Q}
:::

Adjunction says that, given *two* sentences you know to be true, you are free
to **join** them together, to form a conjunction:

:::{.standardform .liveshapes}
-   []{.P}
-   []{.Q}
-   []{.P} ∧ []{.Q}
:::

:::aside
**J** is for join! Ad**j**unction **joins** two premises together. Addition
takes one premise, and adds something to it.
:::

Tip: think of the "J" in ADJ as standing for "join". When you use ADJ, you are
*joining* two independently verified pieces of information into a single
claim. When you use ADD, you are just *adding* some extraneous piece of
information on, as a disjunct, to an independently verified piece of
information.

:::stickywrapper
:::soasticky
| P: I messed up
| Q: You messed up
:::

Suppose we both know that *I messed up*. From this, I can infer, by ADD, that *at least one of us messed up*:

::: proof
5.   [P [PR]{.just}]{.indent}
6.   [P ∨ Q [ADD 5]{.just}]{.indent}
:::

We don't have to first figure out whether or not you messed up too. The fact
that I messed up is enough to make it true that at least one of us did. *That*
is Addition.

On the other hand, suppose we both know that *I messed up*,
and then we discover that *you messed up too*.
From these two pieces of information, we can infer that we both messed up:

::: proof
5.   [P [PR]{.just}]{.indent}
6.   [Q [PR]{.just}]{.indent}
7.   [P ∧ Q [ADJ 5,6]{.just}]{.indent}
:::

*That* is Adjunction: we are *joining* together two pieces of information.

:::

Here is a derivation for you to try, that requires you to keep track of the
difference between ADD and ADJ:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
26 P, Q :|-: (P/\Q)\/W
```
:::solution
::: youtube
<https://youtu.be/isEp4x_Ly_s>
:::
:::

:::

## Biconditional-to-Conditional (BC)

We have introduced four new rules: ADD, MTP, S, and ADJ. We need two more, to
handle biconditionals.

Our rules for the biconditional are very similar to our rules for conjunction.
We have one rule that allows us to "take apart" a biconditional, and one that
allows us to "put together" a biconditional. 

:::stickywrapper
:::{.aside .sticky .flex}
:::ruledisplay
**Biconditional-to-Conditional (BC)**

:::{.displayed .liveshapes}
| []{.P} ↔ []{.Q} ⊢ []{.P} → []{.Q}
| []{.P} ↔ []{.Q} ⊢ []{.Q} → []{.P}
:::
:::
:::

Biconditional-to-Conditional (BC) is the rule we use to "take apart" a biconditional.
If you think of a biconditional as two conditionals joined together, pointing
in opposite directions, BC lets us infer either of those two conditionals from
the biconditional. It has two forms.

First, from the biconditional, we can infer the right-to-left conditional:

:::{.standardform .liveshapes}
-   []{.P} ↔ []{.Q} 
-   []{.P} → []{.Q}  
:::

Second, we can infer the right-to-left conditional:

:::{.standardform .liveshapes}
-   []{.P} ↔ []{.Q} 
-   []{.Q} → []{.P}  
:::

:::stickywrapper
:::soasticky
| S: Socrates is human
| R: Socrates is a rational animal
:::

For example, suppose we know that

:::example
-   S ↔ R: Socrates is human if and only if he is a rational animal. 
:::

And suppose we know that 

:::example
-   S: Socrates is a rational animal.

We can use BC, followed by MP, to infer that he is human:

::: proof
5.   [S ↔ R [PR]{.just}]{.indent}
6.   [R → S [BC 5]{.just}]{.indent}
7.   [R [PR]{.just}]{.indent}
8.   [S [MP 6,7]{.just}]{.indent}
:::

One common mistake is to try to apply MP or MT directly to a
biconditional.
You can't do that: MP and MT only apply to conditionals.
To use a biconditional, you first have to take it apart into its two
conditionals.
Then you can apply MP or MT to one or both of those conditionals.
:::

Here is a problem for you to try:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
27 P<->Q, R<->Q, P :|-: R
```
:::solution
::: youtube
<https://youtu.be/FNbZRAExdiE>
:::
:::

:::

### Conditionals-to-Biconditional (CB)

:::stickywrapper
:::{.aside .sticky .flex}
:::ruledisplay
**Biconditional-to-Conditional (BC)**

:::{.displayed .liveshapes}
| []{.P} ↔ []{.Q} ⊢ []{.P} → []{.Q}
| []{.P} ↔ []{.Q} ⊢ []{.Q} → []{.P}
:::
:::
:::ruledisplay
**Conditionals-to-Biconditional (CB)**

:::{.displayed .liveshapes}
| []{.P} → []{.Q}, []{.Q} → []{.P} ⊢ []{.P} ↔ []{.Q}
:::
:::
:::

Conditionals-to-Biconditional (CB) is the rule that lets us "put together" a
biconditional:

:::{.standardform .liveshapes}
-  []{.P} → []{.Q}
-  []{.Q} → []{.P}
-  []{.P} ↔ []{.Q}
:::

Again, the basic idea is that a biconditional is really two conditionals put
together. So if you have both conditionals---the left-to-right conditional and
the right-to-left conditional---as premises, CB lets you put them together into a
biconditional.

Notice the mnemonic. "BC" is the rule that allows to you infer
from a biconditional ("B") to a conditional ("C"). Hence the order of letters in
the abbreviation of the rule's name: "BC". "CB" is the rule that allows you to infer
from two conditionals ("C") to a biconditional ("B"), hence "CB". 
It is a good idea to get into the habit of pronouncing the "to", even though it is
not part of the abbreviations: pronounce "BC" as "B *to* C", and "CB" as "C
*to* B".

Suppose you are reading the syllabus for a course that includes lots of
homework and three exams, including one big final exam. As you read, you glean
two important pieces of information:

-    You will get an A in the course *if* you score 90% or above on the
     final.
-    You will get an A in the course *only if* you score 90% or above on the
     final.

From these two pieces of information, you can infer that,

-    You will get an A in the course *if and only if* you score 90% or above on
     the final.

:::{.soa .aside}
| P: You score 90% or above on the final
| Q: You get an A in the course
:::

::: proof
5.   [P → Q [PR]{.just}]{.indent}
6.   [Q → P [PR]{.just}]{.indent}
7.   [P ↔ Q [CB 5,6]{.just}]{.indent}
:::

That's what BC looks like in action. Here is a derivation that requires both BC and CB to complete:

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
29 P<->Q :|-: Q<->P
```
:::solution
::: {.youtube}
https://youtu.be/VaKe3icXeqY
:::
:::
:::


:::stickywrapper
:::{.aside .sticky .flex}
:::ruledisplay
**Addition (ADD)**

:::{.displayed .liveshapes}
| []{.P} ⊢ []{.P} ∨ []{.Q}
| []{.Q} ⊢ []{.P} ∨ []{.Q}
:::
:::
:::ruledisplay
**Modus Tollendo Ponens (MTP)**

:::{.displayed .liveshapes}
| []{.P}∨[]{.Q}, ¬[]{.P} ⊢ []{.Q}
| []{.P}∨[]{.Q}, ¬[]{.Q} ⊢ []{.P} 
:::
:::
:::ruledisplay
**Simplification (S)**

:::{.displayed .liveshapes}
| []{.P} ∧ []{.Q} ⊢ []{.P}
| []{.P} ∧ []{.Q} ⊢ []{.Q}
:::
:::
:::ruledisplay
**Adjunction (ADJ)**

:::{.displayed .liveshapes}
| []{.P}, []{.Q} ⊢ []{.P} ∧ []{.Q}
:::
:::
:::ruledisplay
**Biconditional-to-Conditional (BC)**

:::{.displayed .liveshapes}
| []{.P} ↔ []{.Q} ⊢ []{.P} → []{.Q}
| []{.P} ↔ []{.Q} ⊢ []{.Q} → []{.P}
:::
:::
:::ruledisplay
**Conditionals-to-Biconditional (CB)**

:::{.displayed .liveshapes}
| []{.P} → []{.Q}, []{.Q} → []{.P} ⊢ []{.P} ↔ []{.Q}
:::
:::
:::

Here is a more challenging example.
It requires using several of our new rules.
And it illustrates something very important about how to use CB to prove a
biconditional.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=none}
 P->(Q/\R), Q->(R/\P) :|-: P<->Q
|1.Show P<->Q
|2.  P->(Q/\R)   :PR
|3.  Q->(R/\P)   :PR
|4.  ???
```

The answer: enter a show line.
But a show line for what?
A show line for something that will help you complete this derivation.
But what is that?

Note that our conclusion, 'P ↔ Q', is a biconditional.
The only rule we have, that allows us to infer a biconditional, is CB.
So we need to enter a show line that will help put us in position to apply CB.
So, what premises would allow us, by applying CB, to infer 'P ↔ Q'?
Answer: 'P → Q' and 'Q → P'.

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=none}
 P->(Q/\R), Q->(R/\P) :|-: P<->Q
|1.Show P<->Q
|2.  P->(Q/\R)   :PR
|3.  Q->(R/\P)   :PR
|4.  Show P->Q    
|5.  Show Q->P   
|6.  P<->Q       :CB 4,5
|7.:DD 6
```

Of course, this isn't yet a proper solution. 
Lines (4) and (5) are uncancelled show lines. 
Before I can use them to get P ↔ Q by CB, I need to complete those
subderivations.

Since both show lines are show lines for conditionals, I can use CD:


```{.ProofChecker .Prop options="guides fonts indent tabindent resize" submission=none}
 P->(Q/\R), Q->(R/\P) :|-: P<->Q
|1.Show P<->Q
|2.  P->(Q/\R)   :PR
|3.  Q->(R/\P)   :PR
|4.  Show P->Q 
|5.    P         :AS
|6.    Q         :???
|7.  :CD 6
|8.  Show Q->P
|9.    Q         :AS
|10.    P        :???
|11.  :CD 10
|12.  P<->Q       :CB 4,8
|13.:DD 6
```

Of course, this is still not complete. I need to actually find a way to get
from P on line (5) to Q, and I need to actually find a way to get from Q on
line 9 to P. Can you figure it out?

```{.ProofChecker .Prop options="guides fonts indent tabindent resize" points=10}
30 P->(Q/\R), Q->(R/\P) :|-: P<->Q
|1.Show P<->Q
|2.  P->(Q/\R)   :PR
|3.  Q->(R/\P)   :PR
|4.  Show P->Q 
```
:::solution
::: {.youtube}
https://youtu.be/UFRJ194wq0A
:::
:::


## All the Rules

These are the six new rules. Together with MP, MT, and DN, that gives
us 9 rules total:

:::{.flex}
:::ruledisplay
**DN**

::: {.standardform .liveshapes .clean}
-   []{.P}
-   ¬¬[]{.P}
:::
::: {.standardform .liveshapes .clean}
-   ¬¬[]{.P}
-   []{.P}
:::
:::

:::ruledisplay
**MP**

::: {.standardform .liveshapes .clean}
-   []{.P}→[]{.Q}
-   []{.P}
-   []{.Q}
:::
:::

:::ruledisplay
**MT**

::: {.standardform .liveshapes .clean}
-   []{.P}→[]{.Q}
-   ¬[]{.Q}
-   ¬[]{.P}
:::
:::

:::ruledisplay

**MTP**

::: {.standardform .liveshapes .clean}
-   []{.P}∨[]{.Q}
-  ¬[]{.P}
-   []{.Q}
:::
::: {.standardform .liveshapes .clean}
-   []{.P}∨[]{.Q}
-  ¬[]{.Q}
-   []{.P}
:::
:::

:::ruledisplay

**ADD**

::: {.standardform .liveshapes .clean}
-   []{.P}
-   []{.P}∨[]{.Q}
:::
::: {.standardform .liveshapes .clean}
-   []{.P}
-   []{.Q}∨[]{.P}
:::
:::

:::ruledisplay

**S**

::: {.standardform .liveshapes .clean}
-   []{.P}∧[]{.Q}
-   []{.P}
:::
::: {.standardform .liveshapes .clean}
-   []{.P}∧[]{.Q}
-   []{.Q}
:::
:::

:::ruledisplay

**ADJ**

::: {.standardform .liveshapes .clean}
-   []{.P}
-   []{.Q}
-   []{.P}∧[]{.Q}
:::
:::

:::ruledisplay

**BC**

::: {.standardform .liveshapes .clean}
-   []{.P}↔[]{.Q}
-   []{.P}→[]{.Q}
:::
::: {.standardform .liveshapes .clean}
-   []{.P}↔[]{.Q}
-   []{.Q}→[]{.P}
:::
:::

:::ruledisplay

**CB**

::: {.standardform .liveshapes .clean}
-   []{.P}→[]{.Q}
-   []{.Q}→[]{.P}
-   []{.P}↔[]{.Q}
:::
:::
:::

You need to *know* these rules. It is not enough to know *that* these rules
exist, and then look them up every time you need to use them. You want to have
them ready to hand, so you can use them as needed, and use them to *think
through* a derivation. For that, they need to be in your head.

## Strategies

Derivations are puzzles.
You are given 9 rules (DNI, DNE, MP, MT, MTP, ADD, S, ADJ, BC, and CB) and 3
methods (DD, CD, and ID).
There are countless derivations that can be completed using these rules and
methods.
Your task in each case is to discover a pathway from the premises to the conclusion,
using these methods and rules. 

There is *always* more than one possible solution, more than one pathway.
Some paths are short, some long.
Some are methodical, and some involve surprising twists and turns.

If you are stuck, I can show you a path.
And I can teach you strategies and methods that are guaranteed to work.
But the best paths are the paths you find for yourself,
 and the best strategies are the strategies you discover for yourself.

In this way, getting good at derivations is much like getting good at checkers
or chess or tic-tac-toe.
First, you learn the rules.
Then you spend some time playing the game.
Then, maybe, you spend some time reading up on the best strategies.

This chapter gave you the rules.
I also highlighted one important strategy for proving biconditionals:
 try entering a show line for each conditional.
If you can complete both of those subderviations, then you can use CB to infer
your conclusion.
But I've left most of my helpful strategic advice out of the reading,
 to give you the space to learn the rules and play the game.

But when you are ready for it, look to the [Supplement]{10S_s22}.
In other chapters, the supplement has been an optional repository of
additional examples and practice exercises.
For this chapter, the supplement is that, but it is also the repository of a
wealth of strategic advice, designed to help you get "unstuck", and master
these derivations.

```{.QualitativeProblem .MultipleSelection points=10}
31 If I get stuck, or need more strategic advice on how to solve a given derivation, I should:
| despair.
| *take a look at the strategic advice in the supplement.
| *ask for help in class, or in office hours, or over Discord.
```

:::


<!-- vim: set ft=carnap :-->
